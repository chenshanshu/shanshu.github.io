<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MyBlog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://chenshanshu.github.io/2020/06/15/hello-world/"/>
  <updated>2025-02-07T05:41:08.000Z</updated>
  <id>https://chenshanshu.github.io/2020/06/15/hello-world/</id>
  
  <author>
    <name>chenss</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>next.js项目开发遇到的问题</title>
    <link href="https://chenshanshu.github.io/2020/06/15/hello-world/2025/02/07/next-js%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://chenshanshu.github.io/2020/06/15/hello-world/2025/02/07/next-js%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2025-02-07T10:56:55.000Z</published>
    <updated>2025-02-07T05:41:08.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="项目启动后，初始渲染内容为空，页面元素全部是-js-插入的"><a href="#项目启动后，初始渲染内容为空，页面元素全部是-js-插入的" class="headerlink" title="项目启动后，初始渲染内容为空，页面元素全部是 js 插入的"></a>项目启动后，初始渲染内容为空，页面元素全部是 js 插入的</h3><p>项目开发接近尾声，发现 ssr 不能正常渲染，发现所有的<code>Server Components</code>能正常<code>ssr</code>，而所有的<code>Client Components</code>不正常。<br>这里介绍下这两种组件：</p><table><thead><tr><th align="left">What do you need to do?</th><th align="left">Server Component</th><th align="left">Client Component</th></tr></thead><tbody><tr><td align="left">Fetch data</td><td align="left"><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/svgs/correct.svg"                      style="box-shadow:none;"                ></td><td align="left"><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/svgs/cancel.svg"                      style="box-shadow:none;"                ></td></tr><tr><td align="left">Access backend resources (directly)</td><td align="left"><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/svgs/correct.svg"                      style="box-shadow:none;"                ></td><td align="left"><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/svgs/cancel.svg"                      style="box-shadow:none;"                ></td></tr><tr><td align="left">Keep sensitive information on the server (access tokens, API keys, etc)</td><td align="left"><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/svgs/correct.svg"                      style="box-shadow:none;"                ></td><td align="left"><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/svgs/cancel.svg"                      style="box-shadow:none;"                ></td></tr><tr><td align="left">Keep large dependencies on the server / Reduce client-side JavaScript</td><td align="left"><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/svgs/correct.svg"                      style="box-shadow:none;"                ></td><td align="left"><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/svgs/cancel.svg"                      style="box-shadow:none;"                ></td></tr><tr><td align="left">Add interactivity and event listeners (onClick(), onChange(), etc)</td><td align="left"><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/svgs/cancel.svg"                      style="box-shadow:none;"                ></td><td align="left"><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/svgs/correct.svg"                      style="box-shadow:none;"                ></td></tr><tr><td align="left">Use State and Lifecycle Effects (useState(), useReducer(), useEffect(), etc)</td><td align="left"><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/svgs/cancel.svg"                      style="box-shadow:none;"                ></td><td align="left"><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/svgs/correct.svg"                      style="box-shadow:none;"                ></td></tr><tr><td align="left">Use browser-only APIs</td><td align="left"><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/svgs/cancel.svg"                      style="box-shadow:none;"                ></td><td align="left"><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/svgs/correct.svg"                      style="box-shadow:none;"                ></td></tr><tr><td align="left">Use custom hooks that depend on state, effects, or browser-only APIs</td><td align="left"><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/svgs/cancel.svg"                      style="box-shadow:none;"                ></td><td align="left"><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/svgs/correct.svg"                      style="box-shadow:none;"                ></td></tr><tr><td align="left">Use React Class components</td><td align="left"><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/svgs/cancel.svg"                      style="box-shadow:none;"                ></td><td align="left"><img                       lazyload                     src="/images/loading.svg"                     data-src="/images/svgs/correct.svg"                      style="box-shadow:none;"                ></td></tr></tbody></table><p>调查陷入误区以为<code>Client Components</code>导致的问题。然后就查看<code>demo</code>，一点点注释代码找到了下面两个问题。</p><span id="more"></span><h4 id="在-Next-js-中使用-Redux-Persist-会影响服务端渲染"><a href="#在-Next-js-中使用-Redux-Persist-会影响服务端渲染" class="headerlink" title="在 Next.js 中使用 Redux Persist 会影响服务端渲染"></a>在 Next.js 中使用 Redux Persist 会影响服务端渲染</h4><p>解决方案：动态加载 PersistGate</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;use client&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">&quot;react-redux&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; PersistGate &#125; <span class="keyword">from</span> <span class="string">&quot;redux-persist/integration/react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; originStore, store, persistor &#125; <span class="keyword">from</span> <span class="string">&quot;@/store/store&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Layout</span>(<span class="params">&#123; children &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [mounted, setMounted] = useState(<span class="literal">false</span>);</span><br><span class="line">  useEffect(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    setMounted(<span class="literal">true</span>);</span><br><span class="line">  &#125;, []);</span><br><span class="line">  <span class="keyword">if</span> (!mounted) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;originStore&#125;</span>&gt;</span>&#123;children&#125;<span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">PersistGate</span> <span class="attr">loading</span>=<span class="string">&#123;null&#125;</span> <span class="attr">persistor</span>=<span class="string">&#123;persistor&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">          &#123;children&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">PersistGate</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Suspense-也会影响服务端渲染"><a href="#Suspense-也会影响服务端渲染" class="headerlink" title="Suspense 也会影响服务端渲染"></a>Suspense 也会影响服务端渲染</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Suspense &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> Loading <span class="keyword">from</span> <span class="string">&quot;./Loading&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Suspense 的多种使用场景</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Dashboard</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      &#123;/* 1. 处理异步数据加载 */&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Suspense</span> <span class="attr">fallback</span>=<span class="string">&#123;</span>&lt;<span class="attr">UserProfileSkeleton</span> /&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">UserProfile</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">      &#123;/* 2. 代码分割 */&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">Suspense</span> <span class="attr">fallback</span>=<span class="string">&#123;</span>&lt;<span class="attr">ChartSkeleton</span> /&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">LazyLoadedChart</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">      &#123;/* 3. 并行加载多个异步组件 */&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;grid&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Suspense</span> <span class="attr">fallback</span>=<span class="string">&#123;</span>&lt;<span class="attr">RecentPostsSkeleton</span> /&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">RecentPosts</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">Suspense</span> <span class="attr">fallback</span>=<span class="string">&#123;</span>&lt;<span class="attr">UserActivitySkeleton</span> /&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">UserActivity</span> /&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Suspense 的工作原理</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Suspense 如何工作的简化示例</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Suspense</span>(<span class="params">&#123; fallback, children &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 尝试渲染子组件</span></span><br><span class="line">    <span class="keyword">const</span> result = renderChildren(children);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果子组件准备就绪，直接渲染</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (promise) &#123;</span><br><span class="line">    <span class="comment">// 如果子组件还在加载，渲染 fallback</span></span><br><span class="line">    <span class="keyword">if</span> (promise <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> fallback;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理其他错误</span></span><br><span class="line">    <span class="keyword">throw</span> promise;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Suspense 的关键特性： - 处理异步渲染 - 提供加载状态管理 - 实现代码分割 - 改善用户体验 - 支持服务端和客户端组件</p><h3 id="项目引入的第三方包里面有对window或者浏览器api的引用"><a href="#项目引入的第三方包里面有对window或者浏览器api的引用" class="headerlink" title="项目引入的第三方包里面有对window或者浏览器api的引用"></a>项目引入的第三方包里面有对window或者浏览器api的引用</h3><p>这里以<code>Yuan</code>为例子，这个包<code>import</code>进来就会报错</p><h4 id="使用dynamic引入"><a href="#使用dynamic引入" class="headerlink" title="使用dynamic引入"></a>使用dynamic引入</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> dynamic <span class="keyword">from</span> <span class="string">&#x27;next/dynamic&#x27;</span></span><br><span class="line"><span class="comment">// 动态导入组件</span></span><br><span class="line"><span class="keyword">const</span> Yuan = dynamic(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;Yuan&#x27;</span>), &#123;</span><br><span class="line">  <span class="attr">loading</span>: <span class="function">() =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>,</span><br><span class="line">  ssr: <span class="literal">false</span> <span class="comment">// 可选：仅客户端渲染</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这样开发和浏览器控制台没有报错，页面也能展示，但是ssr返回的标签里会插入一个错误信息。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;use client&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params">props</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">window</span> === <span class="string">&#x27;undefined&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> Yuan = <span class="built_in">require</span>(<span class="string">&#x27;pingansec-vue-yuan&#x27;</span>).default</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Yuan(props);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;项目启动后，初始渲染内容为空，页面元素全部是-js-插入的&quot;&gt;&lt;a href=&quot;#项目启动后，初始渲染内容为空，页面元素全部是-js-插入的&quot; class=&quot;headerlink&quot; title=&quot;项目启动后，初始渲染内容为空，页面元素全部是 js 插入的&quot;&gt;&lt;/a&gt;项目启动后，初始渲染内容为空，页面元素全部是 js 插入的&lt;/h3&gt;&lt;p&gt;项目开发接近尾声，发现 ssr 不能正常渲染，发现所有的&lt;code&gt;Server Components&lt;/code&gt;能正常&lt;code&gt;ssr&lt;/code&gt;，而所有的&lt;code&gt;Client Components&lt;/code&gt;不正常。&lt;br&gt;这里介绍下这两种组件：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;What do you need to do?&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;Server Component&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;Client Component&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;Fetch data&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;img  
                     lazyload
                     src=&quot;/images/loading.svg&quot;
                     data-src=&quot;/images/svgs/correct.svg&quot;
                      style=&quot;box-shadow:none;&quot;
                &gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;img  
                     lazyload
                     src=&quot;/images/loading.svg&quot;
                     data-src=&quot;/images/svgs/cancel.svg&quot;
                      style=&quot;box-shadow:none;&quot;
                &gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;Access backend resources (directly)&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;img  
                     lazyload
                     src=&quot;/images/loading.svg&quot;
                     data-src=&quot;/images/svgs/correct.svg&quot;
                      style=&quot;box-shadow:none;&quot;
                &gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;img  
                     lazyload
                     src=&quot;/images/loading.svg&quot;
                     data-src=&quot;/images/svgs/cancel.svg&quot;
                      style=&quot;box-shadow:none;&quot;
                &gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;Keep sensitive information on the server (access tokens, API keys, etc)&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;img  
                     lazyload
                     src=&quot;/images/loading.svg&quot;
                     data-src=&quot;/images/svgs/correct.svg&quot;
                      style=&quot;box-shadow:none;&quot;
                &gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;img  
                     lazyload
                     src=&quot;/images/loading.svg&quot;
                     data-src=&quot;/images/svgs/cancel.svg&quot;
                      style=&quot;box-shadow:none;&quot;
                &gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;Keep large dependencies on the server / Reduce client-side JavaScript&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;img  
                     lazyload
                     src=&quot;/images/loading.svg&quot;
                     data-src=&quot;/images/svgs/correct.svg&quot;
                      style=&quot;box-shadow:none;&quot;
                &gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;img  
                     lazyload
                     src=&quot;/images/loading.svg&quot;
                     data-src=&quot;/images/svgs/cancel.svg&quot;
                      style=&quot;box-shadow:none;&quot;
                &gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;Add interactivity and event listeners (onClick(), onChange(), etc)&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;img  
                     lazyload
                     src=&quot;/images/loading.svg&quot;
                     data-src=&quot;/images/svgs/cancel.svg&quot;
                      style=&quot;box-shadow:none;&quot;
                &gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;img  
                     lazyload
                     src=&quot;/images/loading.svg&quot;
                     data-src=&quot;/images/svgs/correct.svg&quot;
                      style=&quot;box-shadow:none;&quot;
                &gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;Use State and Lifecycle Effects (useState(), useReducer(), useEffect(), etc)&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;img  
                     lazyload
                     src=&quot;/images/loading.svg&quot;
                     data-src=&quot;/images/svgs/cancel.svg&quot;
                      style=&quot;box-shadow:none;&quot;
                &gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;img  
                     lazyload
                     src=&quot;/images/loading.svg&quot;
                     data-src=&quot;/images/svgs/correct.svg&quot;
                      style=&quot;box-shadow:none;&quot;
                &gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;Use browser-only APIs&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;img  
                     lazyload
                     src=&quot;/images/loading.svg&quot;
                     data-src=&quot;/images/svgs/cancel.svg&quot;
                      style=&quot;box-shadow:none;&quot;
                &gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;img  
                     lazyload
                     src=&quot;/images/loading.svg&quot;
                     data-src=&quot;/images/svgs/correct.svg&quot;
                      style=&quot;box-shadow:none;&quot;
                &gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;Use custom hooks that depend on state, effects, or browser-only APIs&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;img  
                     lazyload
                     src=&quot;/images/loading.svg&quot;
                     data-src=&quot;/images/svgs/cancel.svg&quot;
                      style=&quot;box-shadow:none;&quot;
                &gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;img  
                     lazyload
                     src=&quot;/images/loading.svg&quot;
                     data-src=&quot;/images/svgs/correct.svg&quot;
                      style=&quot;box-shadow:none;&quot;
                &gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;Use React Class components&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;img  
                     lazyload
                     src=&quot;/images/loading.svg&quot;
                     data-src=&quot;/images/svgs/cancel.svg&quot;
                      style=&quot;box-shadow:none;&quot;
                &gt;&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;&lt;img  
                     lazyload
                     src=&quot;/images/loading.svg&quot;
                     data-src=&quot;/images/svgs/correct.svg&quot;
                      style=&quot;box-shadow:none;&quot;
                &gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;调查陷入误区以为&lt;code&gt;Client Components&lt;/code&gt;导致的问题。然后就查看&lt;code&gt;demo&lt;/code&gt;，一点点注释代码找到了下面两个问题。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="react next.js" scheme="https://chenshanshu.github.io/2020/06/15/hello-world/tags/react-next-js/"/>
    
  </entry>
  
  <entry>
    <title>获取一个长列表当前滑动的位置</title>
    <link href="https://chenshanshu.github.io/2020/06/15/hello-world/2024/07/24/%E8%8E%B7%E5%8F%96%E4%B8%80%E4%B8%AA%E9%95%BF%E5%88%97%E8%A1%A8%E5%BD%93%E5%89%8D%E6%BB%91%E5%8A%A8%E7%9A%84%E4%BD%8D%E7%BD%AE/"/>
    <id>https://chenshanshu.github.io/2020/06/15/hello-world/2024/07/24/%E8%8E%B7%E5%8F%96%E4%B8%80%E4%B8%AA%E9%95%BF%E5%88%97%E8%A1%A8%E5%BD%93%E5%89%8D%E6%BB%91%E5%8A%A8%E7%9A%84%E4%BD%8D%E7%BD%AE/</id>
    <published>2024-07-24T11:19:36.000Z</published>
    <updated>2025-02-07T05:41:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>question: 在一个列表页中，每个子元素高度不固定，怎么获取到当前视窗中的元素是第几个</p><h3 id="使用-elementFromPoint"><a href="#使用-elementFromPoint" class="headerlink" title="使用 elementFromPoint"></a>使用 elementFromPoint</h3><blockquote><p><code>elementFromPoint</code> 方法可以根据指定的坐标点，返回与该点最近的元素。如果指定坐标上没有元素，则返回 null</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> element = <span class="built_in">document</span>.elementFromPoint(x, y);</span><br></pre></td></tr></table></figure><p>具体实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递增 x，y 坐标，直到找到包含目标类名的元素为止</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getElement</span>(<span class="params">className</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> x = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> y = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (!element &amp;&amp; y &lt; <span class="built_in">window</span>.innerHeight) &#123;</span><br><span class="line">    x++;</span><br><span class="line">    y++;</span><br><span class="line">    element = <span class="built_in">document</span>.elementFromPoint(x, y);</span><br><span class="line">    <span class="keyword">if</span> (!element.className.includes(className)) &#123;</span><br><span class="line">      element = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取元素的索引</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getElementIndex</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (element &amp;&amp; element.parentNode) &#123;</span><br><span class="line">    <span class="keyword">var</span> children = element.parentNode.children;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; children.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (children[i] === element) &#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-scrollTop"><a href="#使用-scrollTop" class="headerlink" title="使用 scrollTop"></a>使用 scrollTop</h3><blockquote><p><code>scrollTop</code> 属性返回或设置元素的垂直滚动位置。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> scrollTop = element.scrollTop;</span><br></pre></td></tr></table></figure><p>循环元素，然后累加高度直至高度超过 scrollTop，此时的 i 就是元素的索引</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getElementIndex</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> height = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (height &lt; element.scrollTop) &#123;</span><br><span class="line">    i++;</span><br><span class="line">    height += element.children[i].offsetHeight;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="getBoundingClientRect"><a href="#getBoundingClientRect" class="headerlink" title="getBoundingClientRect"></a>getBoundingClientRect</h3><blockquote><p><code>getBoundingClientRect</code> 方法返回元素的大小及其相对于视口的位置。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> rect = element.getBoundingClientRect();</span><br></pre></td></tr></table></figure><p>监听滚动事件，然后遍历元素计算其位置，直到发现 top 大于 0 的第一个元素，此时的 i 就是元素的索引</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getElementIndex</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> rect = element.getBoundingClientRect();</span><br><span class="line">  <span class="keyword">while</span> (rect.top &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    i++;</span><br><span class="line">    rect = element.children[i].getBoundingClientRect();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="IntersectionObserver"><a href="#IntersectionObserver" class="headerlink" title="IntersectionObserver"></a>IntersectionObserver</h3><blockquote><p><code>IntersectionObserver</code> 接口可以用来监测元素与祖先元素或顶级文档视窗（viewport）交叉状态的变化。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> observer = <span class="keyword">new</span> IntersectionObserver(callback, options);</span><br><span class="line"><span class="string">``</span><span class="string">``</span></span><br><span class="line"></span><br><span class="line">具体实现</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">`js</span></span><br><span class="line"><span class="string">function getElementIndex(element) &#123;</span></span><br><span class="line"><span class="string">  const observer = new IntersectionObserver((entries) =&gt; &#123;</span></span><br><span class="line"><span class="string">    entries.forEach((entry) =&gt; &#123;</span></span><br><span class="line"><span class="string">      if (entry.isIntersecting) &#123;</span></span><br><span class="line"><span class="string">        observer.unobserve(element);</span></span><br><span class="line"><span class="string">        return entry.target;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">  &#125;);</span></span><br><span class="line"><span class="string">  observer.observe(element);</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;question: 在一个列表页中，每个子元素高度不固定，怎么获取到当前视窗中的元素是第几个&lt;/p&gt;
&lt;h3 id=&quot;使用-elementFromPoint&quot;&gt;&lt;a href=&quot;#使用-elementFromPoint&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
    
    
      <category term="js" scheme="https://chenshanshu.github.io/2020/06/15/hello-world/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>css绘制一个斜条纹进度条</title>
    <link href="https://chenshanshu.github.io/2020/06/15/hello-world/2024/07/18/css%E7%BB%98%E5%88%B6%E4%B8%80%E4%B8%AA%E6%96%9C%E6%9D%A1%E7%BA%B9%E8%BF%9B%E5%BA%A6%E6%9D%A1/"/>
    <id>https://chenshanshu.github.io/2020/06/15/hello-world/2024/07/18/css%E7%BB%98%E5%88%B6%E4%B8%80%E4%B8%AA%E6%96%9C%E6%9D%A1%E7%BA%B9%E8%BF%9B%E5%BA%A6%E6%9D%A1/</id>
    <published>2024-07-18T20:53:15.000Z</published>
    <updated>2025-02-07T05:41:08.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress-row&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;progress-bar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.progress-row</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#eff6fb</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.progress-bar</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#327bf9</span>;</span><br><span class="line">  <span class="comment">/* background: linear-gradient(</span></span><br><span class="line"><span class="comment">          45deg,</span></span><br><span class="line"><span class="comment">          #fb3 25%,</span></span><br><span class="line"><span class="comment">          #58a 0,</span></span><br><span class="line"><span class="comment">          #58a 50%,</span></span><br><span class="line"><span class="comment">          #fb3 0,</span></span><br><span class="line"><span class="comment">          #fb3 75%,</span></span><br><span class="line"><span class="comment">          #58a 0</span></span><br><span class="line"><span class="comment">        ); */</span></span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(</span><br><span class="line">    <span class="number">45deg</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.15</span>) <span class="number">25%</span>,</span><br><span class="line">    transparent <span class="number">25%</span>,</span><br><span class="line">    transparent <span class="number">50%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.15</span>) <span class="number">50%</span>,</span><br><span class="line">    <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.15</span>) <span class="number">75%</span>,</span><br><span class="line">    transparent <span class="number">0</span></span><br><span class="line">  );</span><br><span class="line">  <span class="attribute">animation</span>: slide <span class="number">1s</span> linear infinite;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">12px</span> <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">transition</span>: width <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> slide &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>-x: <span class="number">0px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">background-position</span>-x: <span class="number">12px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><style>  .example-box{    width:100%;    min-height:100px;    border-radius:10px;    border:1px solid #efefef;    display: flex;    justify-content: center;    align-items: center;    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);  }  .progress-row {  width: 100px;  height: 10px;  border-radius: 5px;  background-color: #eff6fb;  overflow: hidden;}.progress-bar {  height: 100%;  background-color: #327bf9;  /* background: linear-gradient(          45deg,          #fb3 25%,          #58a 0,          #58a 50%,          #fb3 0,          #fb3 75%,          #58a 0        ); */  background-image: linear-gradient(    45deg,    rgba(255, 255, 255, 0.15) 25%,    transparent 25%,    transparent 50%,    rgba(255, 255, 255, 0.15) 50%,    rgba(255, 255, 255, 0.15) 75%,    transparent 0  );  animation: slide 1s linear infinite;  background-size: 12px 12px;  transition: width 1s;}@keyframes slide {  0% {    background-position-x: 0px;  }  100% {    background-position-x: 12px;  }}</style><div class="example-box">  <div class="progress-row"><div class="progress-bar"></div></div></div>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;progress-row&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;progress-bar&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.progress-row&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;100px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;10px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;border-radius&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;5px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#eff6fb&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;overflow&lt;/span&gt;: hidden;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.progress-bar&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;100%&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#327bf9&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/* background: linear-gradient(&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;          45deg,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;          #fb3 25%,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;          #58a 0,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;          #58a 50%,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;          #fb3 0,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;          #fb3 75%,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;          #58a 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;        ); */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;background-image&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;linear-gradient&lt;/span&gt;(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;number&quot;&gt;45deg&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;rgba&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.15&lt;/span&gt;) &lt;span class=&quot;number&quot;&gt;25%&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    transparent &lt;span class=&quot;number&quot;&gt;25%&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    transparent &lt;span class=&quot;number&quot;&gt;50%&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;rgba&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.15&lt;/span&gt;) &lt;span class=&quot;number&quot;&gt;50%&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;rgba&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.15&lt;/span&gt;) &lt;span class=&quot;number&quot;&gt;75%&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    transparent &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;animation&lt;/span&gt;: slide &lt;span class=&quot;number&quot;&gt;1s&lt;/span&gt; linear infinite;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;background-size&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;12px&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;12px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attribute&quot;&gt;transition&lt;/span&gt;: width &lt;span class=&quot;number&quot;&gt;1s&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@keyframes&lt;/span&gt; slide &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;number&quot;&gt;0%&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background-position&lt;/span&gt;-x: &lt;span class=&quot;number&quot;&gt;0px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;number&quot;&gt;100%&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;background-position&lt;/span&gt;-x: &lt;span class=&quot;number&quot;&gt;12px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="css" scheme="https://chenshanshu.github.io/2020/06/15/hello-world/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>除了keep-alive还有哪些页面缓存方案</title>
    <link href="https://chenshanshu.github.io/2020/06/15/hello-world/2024/05/09/%E9%99%A4%E4%BA%86keep-alive%E8%BF%98%E6%9C%89%E5%93%AA%E4%BA%9B%E9%A1%B5%E9%9D%A2%E7%BC%93%E5%AD%98%E6%96%B9%E6%A1%88/"/>
    <id>https://chenshanshu.github.io/2020/06/15/hello-world/2024/05/09/%E9%99%A4%E4%BA%86keep-alive%E8%BF%98%E6%9C%89%E5%93%AA%E4%BA%9B%E9%A1%B5%E9%9D%A2%E7%BC%93%E5%AD%98%E6%96%B9%E6%A1%88/</id>
    <published>2024-05-09T16:08:31.000Z</published>
    <updated>2025-02-07T05:41:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>有这么一个需求：列表页进入详情页后，切换回列表页，需要对列表页进行缓存，如果从首页进入列表页，就要重新加载列表页。<br>对于这个需求，我的第一个想法就是使用keep-alive来缓存列表页，列表和详情页切换时，列表页会被缓存；从首页进入列表页时，就重置列表页数据并重新获取新数据来达到列表页重新加载的效果。<br>但是，这个方案有个很不好的地方就是：如果列表页足够复杂，有下拉刷新、下拉加载、有弹窗、有轮播等，在清除缓存时，就需要重置很多数据和状态，而且还可能要手动去销毁和重新加载某些组件，这样做既增加了复杂度，也容易出bug。<br>接下来说说我的想到的新实现方案（代码基于Vue3）。</p><span id="more"></span><h2 id="keep-alive-缓存和清除"><a href="#keep-alive-缓存和清除" class="headerlink" title="keep-alive 缓存和清除"></a>keep-alive 缓存和清除</h2><blockquote><p>keep-alive 缓存原理：进入页面时，页面组件渲染完成，keep-alive 会缓存页面组件的实例；离开页面后，组件实例由于已经缓存就不会进行销毁；当再次进入页面时，就会将缓存的组件实例拿出来渲染，因为组件实例保存着原来页面的数据和Dom的状态，那么直接渲染组件实例就能得到原来的页面。</p></blockquote><p>keep-alive 最大的难题就是缓存的清理，如果能有简单的缓存清理方法，那么keep-alive 组件用起来就很爽。<br>但是，keep-alive 组件没有提供清除缓存的API，那有没有其他清除缓存的办法呢？答案是有的。我们先看看 keep-alive 组件的props：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">include - string | <span class="built_in">RegExp</span> | <span class="built_in">Array</span>。只有名称匹配的组件会被缓存。</span><br><span class="line">exclude - string | <span class="built_in">RegExp</span> | <span class="built_in">Array</span>。任何名称匹配的组件都不会被缓存。</span><br><span class="line">max - number | string。最多可以缓存多少组件实例。</span><br></pre></td></tr></table></figure><p>从include描述来看，我发现include是可以用来清除缓存，做法是：将组件名称添加到include里，组件会被缓存；移除组件名称，组件缓存会被清除。根据这个原理，用hook简单封装一下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref, nextTick &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> caches = ref&lt;string[]&gt;([])</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">useRouteCache</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 添加缓存的路由组件</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">addCache</span> (<span class="params">componentName: string | string []</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(componentName)) &#123;</span><br><span class="line">      componentName.forEach(addCache)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!componentName || caches.value.includes(componentName)) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    caches.value.push(componentName)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 移除缓存的路由组件</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">removeCache</span> (<span class="params">componentName: string</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> index = caches.value.indexOf(componentName)</span><br><span class="line">    <span class="keyword">if</span> (index &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> caches.value.splice(index, <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 移除缓存的路由组件的实例</span></span><br><span class="line">  <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">removeCacheEntry</span> (<span class="params">componentName: string</span>) </span>&#123;    </span><br><span class="line">    <span class="keyword">if</span> (removeCache(componentName)) &#123;</span><br><span class="line">      <span class="keyword">await</span> nextTick()</span><br><span class="line">      addCache(componentName)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    caches,</span><br><span class="line">    addCache,</span><br><span class="line">    removeCache,</span><br><span class="line">    removeCacheEntry</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>hook的用法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-view v-slot=<span class="string">&quot;&#123; Component &#125;&quot;</span>&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">:include</span>=<span class="string">&quot;caches&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;Component&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span></span><br><span class="line">&lt;/router-view&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">import useRouteCache from &#x27;./hooks/useRouteCache&#x27;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">const &#123; caches, addCache &#125; = useRouteCache()</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"><span class="comment">&lt;!-- 将列表页组件名称添加到需要缓存名单中 --&gt;</span></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">addCache([&#x27;List&#x27;])</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>清除列表页缓存如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> useRouteCache <span class="keyword">from</span> <span class="string">&#x27;@/hooks/useRouteCache&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; removeCacheEntry &#125; = useRouteCache()</span><br><span class="line">removeCacheEntry(<span class="string">&#x27;List&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>此处removeCacheEntry方法清除的是列表组件的实例，’List’ 值仍然在 组件的include里，下次重新进入列表页会重新加载列表组件，并且之后会继续列表组件进行缓存。</p></blockquote><h2 id="列表页清除缓存的时机"><a href="#列表页清除缓存的时机" class="headerlink" title="列表页清除缓存的时机"></a>列表页清除缓存的时机</h2><p><strong>进入列表页后清除缓存</strong><br>在列表页路由组件的beforeRouteEnter勾子中判断是否是从其他页面（Home）进入的，是则清除缓存，不是则使用缓存。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">defineOptions(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;List1&#x27;</span>,</span><br><span class="line">  beforeRouteEnter (to: RouteRecordNormalized, <span class="attr">from</span>: RouteRecordNormalized) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">from</span>.name === <span class="string">&#x27;Home&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> &#123; removeCacheEntry &#125; = useRouteCache()</span><br><span class="line">      removeCacheEntry(<span class="string">&#x27;List1&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这种缓存方式有个不太友好的地方：当从首页进入列表页，列表页和详情页来回切换，列表页是缓存的；但是在首页和列表页间用浏览器的前进后退来切换时，我们更多的是希望列表页能保留缓存，就像在多页面中浏览器前进后退会缓存原页面一样的效果。但实际上，列表页重新刷新了，这就需要使用另一种解决办法，点击链接时清除缓存清除缓存。</p><p><strong>点击链接跳转前清除缓存</strong><br>在首页点击跳转列表页前，在点击事件的时候去清除列表页缓存，这样的话在首页和列表页用浏览器的前进后退来回切换，列表页都是缓存状态，只要当重新点击跳转链接的时候，才重新加载列表页，满足预期。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首页 Home.vue</span></span><br><span class="line"></span><br><span class="line">&lt;li&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/list&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;removeCacheBeforeEnter&quot;</span>&gt;</span>列表页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line">&lt;/li&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> useRouteCache <span class="keyword">from</span> <span class="string">&#x27;@/hooks/useRouteCache&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">defineOptions(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">name</span>: <span class="string">&#x27;Home&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">const</span> &#123; removeCacheEntry &#125; = useRouteCache()</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="comment">// 进入页面前，先清除缓存实例</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="function"><span class="keyword">function</span> <span class="title">removeCacheBeforeEnter</span> (<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  removeCacheEntry(<span class="string">&#x27;List&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="状态管理实现缓存"><a href="#状态管理实现缓存" class="headerlink" title="状态管理实现缓存"></a>状态管理实现缓存</h2><p>通过状态管理库存储页面的状态和数据也能实现页面缓存。此处状态管理使用的是pinia。<br>首先使用pinia创建列表页store：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line">interface Item &#123;</span><br><span class="line">  id?: number,</span><br><span class="line">  content?: string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useListStore = defineStore(<span class="string">&#x27;list&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// 推荐使用 完整类型推断的箭头函数</span></span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">isRefresh</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">pageSize</span>: <span class="number">30</span>,</span><br><span class="line">      <span class="attr">currentPage</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">list</span>: [] <span class="keyword">as</span> Item[],</span><br><span class="line">      <span class="attr">curRow</span>: <span class="literal">null</span> <span class="keyword">as</span> Item | <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    setList (data: Item []) &#123;</span><br><span class="line">      <span class="built_in">this</span>.list = data</span><br><span class="line">    &#125;,</span><br><span class="line">    setCurRow (data: Item) &#123;</span><br><span class="line">      <span class="built_in">this</span>.curRow = data</span><br><span class="line">    &#125;,</span><br><span class="line">    setIsRefresh (data: boolean) &#123;</span><br><span class="line">      <span class="built_in">this</span>.isRefresh = data</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useListStore</span><br></pre></td></tr></table></figure><p>通过beforeRouteEnter钩子判断是否从首页进来，是则通过 listStore.$reset() 来重置数据，否则使用缓存的数据状态；之后根据 listStore.isRefresh 标示判断是否重新获取列表数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">defineOptions(&#123;</span><br><span class="line">  beforeRouteEnter (to: RouteLocationNormalized, <span class="attr">from</span>: RouteLocationNormalized) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">from</span>.name === <span class="string">&#x27;Home&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> listStore = useListStore()</span><br><span class="line">      listStore.$reset()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">onBeforeMount(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!listStore.useCache) &#123;</span><br><span class="line">    loading.value = <span class="literal">true</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      listStore.setList(getData())</span><br><span class="line">      loading.value = <span class="literal">false</span></span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">    listStore.useCache = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>缺点</strong><br>通过状态管理去做缓存的话，需要将状态数据都存在stroe里，状态多起来的话，会有点繁琐，而且状态写在store里肯定没有写在列表组件里来的直观；状态管理由于只做列表页数据的缓存，对于一些非受控组件来说，组件内部状态改变是缓存不了的，这就导致页面渲染后跟原来有差别，需要额外代码操作。</p><h2 id="页面弹窗实现缓存"><a href="#页面弹窗实现缓存" class="headerlink" title="页面弹窗实现缓存"></a>页面弹窗实现缓存</h2><p>将详情页做成全屏弹窗，那么从列表页进入详情页，就只是简单地打开详情页弹窗，将列表页覆盖，从而达到列表页 “缓存”的效果，而非真正的缓存。<br>这里还有一个问题，打开详情页之后，如果点后退，会返回到首页，实际上我们希望是返回列表页，这就需要给详情弹窗加个历史记录，如列表页地址为 ‘/list’，打开详情页变为 ‘/list?id=1’。<br>弹窗组件实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// PopupPage.vue</span></span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;popup-page&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;[!dialogVisible &amp;&amp; &#x27;hidden&#x27;]&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">v-if</span>=<span class="string">&quot;dialogVisible&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; useLockscreen &#125; <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> &#123; computed, defineProps, defineEmits &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">import</span> useHistoryPopup <span class="keyword">from</span> <span class="string">&#x27;./useHistoryPopup&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">const</span> props = defineProps(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">modelValue</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">type</span>: <span class="built_in">Boolean</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">default</span>: <span class="literal">false</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">// 路由记录</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">history</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">type</span>: <span class="built_in">Object</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="comment">// 配置了history后，初次渲染时，如果有url上有history参数，则自动打开弹窗</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">auto</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">type</span>: <span class="built_in">Boolean</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">default</span>: <span class="literal">true</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">size</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">type</span>: <span class="built_in">String</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">default</span>: <span class="string">&#x27;50%&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">full</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">type</span>: <span class="built_in">Boolean</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">default</span>: <span class="literal">false</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">const</span> emit = defineEmits(</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  [<span class="string">&#x27;update:modelValue&#x27;</span>, <span class="string">&#x27;autoOpen&#x27;</span>, <span class="string">&#x27;autoClose&#x27;</span>]</span></span></span><br><span class="line"><span class="javascript"><span class="xml">)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">const</span> dialogVisible = computed&lt;boolean&gt;(&#123; <span class="comment">// 控制弹窗显示</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  get () &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">return</span> props.modelValue</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  set (val) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    emit(<span class="string">&#x27;update:modelValue&#x27;</span>, val)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">useLockscreen(dialogVisible)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">useHistoryPopup(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">history</span>: computed(<span class="function">() =&gt;</span> props.history),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">auto</span>: props.auto,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">dialogVisible</span>: dialogVisible,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">onAutoOpen</span>: <span class="function">() =&gt;</span> emit(<span class="string">&#x27;autoOpen&#x27;</span>),</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">onAutoClose</span>: <span class="function">() =&gt;</span> emit(<span class="string">&#x27;autoClose&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&#x27;less&#x27;</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-class">.popup-page</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">position</span>: fixed;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">left</span>: <span class="number">0</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">right</span>: <span class="number">0</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">top</span>: <span class="number">0</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">z-index</span>: <span class="number">100</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">overflow</span>: auto;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  </span></span></span><br><span class="line"><span class="css"><span class="xml">  &amp;<span class="selector-class">.hidden</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="attribute">display</span>: none;</span></span></span><br><span class="line"><span class="css"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>缺点</strong><br>弹窗实现页面缓存，局限比较大，只能在列表页和详情页中才有效，离开列表页之后，缓存就会失效，比较合适一些简单缓存的场景。</p><h2 id="父子路由实现缓存"><a href="#父子路由实现缓存" class="headerlink" title="父子路由实现缓存"></a>父子路由实现缓存</h2><p>该方案原理其实就是页面弹窗，列表页为父路由，详情页为子路由，从列表页跳转到详情页时，显示详情页字路由，且详情页全屏显示，覆盖住列表页。<br>声明父子路由:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/list&#x27;</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;list&#x27;</span>,</span><br><span class="line">  <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./views/List.vue&#x27;</span>),</span><br><span class="line">  <span class="attr">children</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/detail&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./views/Detail.vue&#x27;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>列表页代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 列表页</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">el-table</span> <span class="attr">v-loading</span>=<span class="string">&quot;loading&quot;</span> <span class="attr">:data</span>=<span class="string">&quot;tableData&quot;</span> <span class="attr">border</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%; margin-top: 30px;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;id&quot;</span> <span class="attr">label</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;content&quot;</span> <span class="attr">label</span>=<span class="string">&quot;内容&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;操作&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123; row &#125;&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">el-link</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;gotoDetail(row)&quot;</span>&gt;</span>进入详情<span class="tag">&lt;/<span class="name">el-link</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">el-tag</span> <span class="attr">type</span>=<span class="string">&quot;success&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;row.id === curRow?.id&quot;</span>&gt;</span>刚点击<span class="tag">&lt;/<span class="name">el-tag</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">el-pagination</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">    <span class="attr">v-model:currentPage</span>=<span class="string">&quot;currentPage&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">    <span class="attr">:page-size</span>=<span class="string">&quot;pageSize&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">    <span class="attr">layout</span>=<span class="string">&quot;total, prev, pager, next&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">    <span class="attr">:total</span>=<span class="string">&quot;list.length&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">  /&gt;</span></span></span><br><span class="line">  </span><br><span class="line">  &lt;!-- 详情页 --&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">class</span>=<span class="string">&quot;popyp-page&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&#x27;less&#x27;</span> <span class="attr">scoped</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml"><span class="selector-class">.popyp-page</span> &#123;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">position</span>: fixed;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">top</span>: <span class="number">0</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">left</span>: <span class="number">0</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">right</span>: <span class="number">0</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">z-index</span>: <span class="number">100</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">  <span class="attribute">overflow</span>: auto;</span></span></span><br><span class="line"><span class="css"><span class="xml">&#125;</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h2&gt;&lt;p&gt;有这么一个需求：列表页进入详情页后，切换回列表页，需要对列表页进行缓存，如果从首页进入列表页，就要重新加载列表页。&lt;br&gt;对于这个需求，我的第一个想法就是使用keep-alive来缓存列表页，列表和详情页切换时，列表页会被缓存；从首页进入列表页时，就重置列表页数据并重新获取新数据来达到列表页重新加载的效果。&lt;br&gt;但是，这个方案有个很不好的地方就是：如果列表页足够复杂，有下拉刷新、下拉加载、有弹窗、有轮播等，在清除缓存时，就需要重置很多数据和状态，而且还可能要手动去销毁和重新加载某些组件，这样做既增加了复杂度，也容易出bug。&lt;br&gt;接下来说说我的想到的新实现方案（代码基于Vue3）。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="vue" scheme="https://chenshanshu.github.io/2020/06/15/hello-world/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>flex布局</title>
    <link href="https://chenshanshu.github.io/2020/06/15/hello-world/2024/03/25/flex%E5%B8%83%E5%B1%80/"/>
    <id>https://chenshanshu.github.io/2020/06/15/hello-world/2024/03/25/flex%E5%B8%83%E5%B1%80/</id>
    <published>2024-03-25T13:56:21.000Z</published>
    <updated>2025-02-07T05:41:08.000Z</updated>
    
    <content type="html"><![CDATA[<style>.father{    border:1px solid;    margin-bottom: 10px;}.child{    width: 200px;    height: 80px;    line-height: 80px;    text-align: center;    background: #efefef;    border:1px solid #ccc;}</style><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="弹性盒子布局-flex"><a href="#弹性盒子布局-flex" class="headerlink" title="弹性盒子布局 flex"></a>弹性盒子布局 flex</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="father" style="display:flex;">    <div class="child">child1</div>    <div class="child">child2</div>    <div class="child">child3</div></div><span id="more"></span><h2 id="元素间距-gap"><a href="#元素间距-gap" class="headerlink" title="元素间距 gap"></a>元素间距 gap</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    gap: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="example-box2">    <div class="father" style="display:flex;gap:10px;">        <div class="child">child1</div>        <div class="child">child2</div>        <div class="child">child3</div>    </div></div><h2 id="排列方向"><a href="#排列方向" class="headerlink" title="排列方向"></a>排列方向</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    gap: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">flex-flow</span>: row nowrap; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>横向 超出不换行 （默认）<code>flex-flow: row nowrap;</code> 当子元素宽度超过父元素，子元素宽度会被压缩。  <div class="father" style="display:flex; flex-flow: row nowrap; gap:10px;">      <div class="child">child1</div>      <div class="child">child2</div>      <div class="child">child3</div>      <div class="child">child4</div>      <div class="child">child5</div>      <div class="child">child6</div>  </div></li><li>横向 超出换行 <code>flex-flow: row wrap;</code>  <div class="father" style="display:flex; flex-flow: row wrap; gap:10px;">      <div class="child">child1</div>      <div class="child">child2</div>      <div class="child">child3</div>      <div class="child">child4</div>      <div class="child">child5</div>      <div class="child">child6</div>      <div class="child">child7</div>      <div class="child">child8</div>  </div></li><li>竖向 超出不换行 <code>flex-flow: column nowrap;</code>  <div class="father" style="display:flex; flex-flow: column nowrap; gap:10px;">      <div class="child">child1</div>      <div class="child">child2</div>      <div class="child">child3</div>  </div></li><li>竖向 超出换行 <code>flex-flow: column wrap;</code>（不太常用，间隔怪异）  <div class="father" style="display:flex; flex-flow: column wrap; gap:10px; height:200px;">      <div class="child">child1</div>      <div class="child">child2</div>      <div class="child">child3</div>      <div class="child">child4</div>      <div class="child">child5</div>      <div class="child">child6</div>  </div></li></ul><h2 id="对齐方式"><a href="#对齐方式" class="headerlink" title="对齐方式"></a>对齐方式</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: flex-start;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>左对齐（默认） <code>justify-content: flex-start;</code>  <div class="father" style="display: flex;gap: 10px;justify-content: flex-start;">      <div class="child">child1</div>      <div class="child">child2</div>      <div class="child">child3</div>  </div></li><li>右对齐 <code>justify-content: flex-end;</code>  <div class="father" style="display: flex;gap: 10px;justify-content: flex-end;">      <div class="child">child1</div>      <div class="child">child2</div>      <div class="child">child3</div>  </div></li><li>中对齐 <code>justify-content: center;</code>  <div class="father" style="display: flex;gap: 10px;justify-content: center;">      <div class="child">child1</div>      <div class="child">child2</div>      <div class="child">child3</div>  </div></li><li>两侧靠边剩余空间平分 <code>justify-content: space-between;</code>  <div class="father" style="display: flex;gap: 10px;justify-content: space-between;">      <div class="child">child1</div>      <div class="child">child2</div>      <div class="child">child3</div>  </div></li><li>每个子元素左右各分一部分 <code>justify-content: space-around;</code>  <div class="father" style="display: flex;gap: 10px;justify-content: space-around;">      <div class="child">child1</div>      <div class="child">child2</div>      <div class="child">child3</div>  </div></li></ul><h2 id="交叉轴的对齐"><a href="#交叉轴的对齐" class="headerlink" title="交叉轴的对齐"></a>交叉轴的对齐</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">align-items</span>: flex-start;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>上对齐（默认） <code>align-items: flex-start;</code>  <div class="father" style="display: flex;gap: 10px;">      <div class="child" style="height:20px; line-height:20px;">child1</div>      <div class="child" style="height:40px; line-height:40px;">child2</div>      <div class="child" style="height:60px; line-height:60px;">child3</div>  </div></li><li>中对齐 <code>align-items: center;</code>  <div class="father" style="display: flex;gap: 10px; align-items: center;">      <div class="child" style="height:20px; line-height:20px;">child1</div>      <div class="child" style="height:40px; line-height:40px;">child2</div>      <div class="child" style="height:60px; line-height:60px;">child3</div>  </div></li><li>下对齐 <code>align-items: flex-end;</code>  <div class="father" style="display: flex;gap: 10px; align-items: flex-end;">      <div class="child" style="height:20px; line-height:20px;">child1</div>      <div class="child" style="height:40px; line-height:40px;">child2</div>      <div class="child" style="height:60px; line-height:60px;">child3</div>  </div></li></ul><h2 id="居中"><a href="#居中" class="headerlink" title="居中"></a>居中</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="father" style="display: flex; justify-content: center; align-items: center; height: 120px;">    <div class="child">child1</div></div>]]></content>
    
    <summary type="html">
    
      &lt;style&gt;
.father{
    border:1px solid;
    margin-bottom: 10px;
}
.child{
    width: 200px;
    height: 80px;
    line-height: 80px;
    text-align: center;
    background: #efefef;
    border:1px solid #ccc;
}
&lt;/style&gt;

&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;father&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;child&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;1&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;child&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;2&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;child&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;3&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;弹性盒子布局-flex&quot;&gt;&lt;a href=&quot;#弹性盒子布局-flex&quot; class=&quot;headerlink&quot; title=&quot;弹性盒子布局 flex&quot;&gt;&lt;/a&gt;弹性盒子布局 flex&lt;/h2&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.father&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;display&lt;/span&gt;: flex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;div class=&quot;father&quot; style=&quot;display:flex;&quot;&gt;
    &lt;div class=&quot;child&quot;&gt;child1&lt;/div&gt;
    &lt;div class=&quot;child&quot;&gt;child2&lt;/div&gt;
    &lt;div class=&quot;child&quot;&gt;child3&lt;/div&gt;
&lt;/div&gt;
    
    </summary>
    
    
    
      <category term="css" scheme="https://chenshanshu.github.io/2020/06/15/hello-world/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>react-ssr的实现</title>
    <link href="https://chenshanshu.github.io/2020/06/15/hello-world/2024/02/01/react-ssr%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>https://chenshanshu.github.io/2020/06/15/hello-world/2024/02/01/react-ssr%E7%9A%84%E5%AE%9E%E7%8E%B0/</id>
    <published>2024-02-01T09:58:09.000Z</published>
    <updated>2025-02-07T05:41:08.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="浏览器解析过程"><a href="#浏览器解析过程" class="headerlink" title="浏览器解析过程"></a>浏览器解析过程</h3><p>从输入URL到页面渲染完成大致流程为：</p><ul><li>解析URL</li><li>浏览器本地缓存</li><li>DNS解析</li><li>建立TCP/IP连接</li><li>发送HTTP请求</li><li>服务器处理请求并返回HTTP报文</li><li>浏览器根据深度遍历的方式把html节点遍历构建DOM树</li><li>遇到CSS外链，异步加载解析CSS,构建CSS规则树</li><li>遇到script标签，如果是普通JS标签则同步加载并执行，阻塞页面渲染，如果标签上有defer/async属性则异步加载JS资源</li><li>将dom树和CSS DOM树构造成render树</li><li>渲染render树</li></ul><span id="more"></span><h3 id="一-主流渲染方式"><a href="#一-主流渲染方式" class="headerlink" title="一.主流渲染方式"></a>一.主流渲染方式</h3><h4 id="1-1-CSR客户端渲染"><a href="#1-1-CSR客户端渲染" class="headerlink" title="1.1 CSR客户端渲染"></a>1.1 CSR客户端渲染</h4><h5 id="1-1-1-概念"><a href="#1-1-1-概念" class="headerlink" title="1.1.1 概念"></a>1.1.1 概念</h5><p>客户端渲染，指页面上的内容由浏览器执行js脚本而生成<br>React SPA单页面应用项目就是客户端渲染</p><h5 id="1-1-2-流程"><a href="#1-1-2-流程" class="headerlink" title="1.1.2 流程"></a>1.1.2 流程</h5><p>浏览器请求HTML,React项目利用webpack将页面打包成bundle.js脚本,插入index.html,浏览器请求到静态页面,会解析其中的bundle.js脚本,获取页面的动态数据和交互事件,向静态页面插入数据,最终形成完整的页面</p><h5 id="1-1-3-优缺点"><a href="#1-1-3-优缺点" class="headerlink" title="1.1.3 优缺点"></a>1.1.3 优缺点</h5><p><strong>优点</strong></p><ul><li>前后端分离,前端负责渲染页面,后端负责实现接口</li><li>前端跳转时,不需要请求后台,页面跳转更快</li></ul><p><strong>缺点</strong></p><ul><li>搜索引擎无法爬取分析网页内容,不利于SEO</li><li>需要等待整个应用的js加载以及数据请求获取网页动态数据,首屏加载时间长</li></ul><h4 id="1-2-SSR服务端渲染"><a href="#1-2-SSR服务端渲染" class="headerlink" title="1.2 SSR服务端渲染"></a>1.2 SSR服务端渲染</h4><h5 id="1-2-1-概念"><a href="#1-2-1-概念" class="headerlink" title="1.2.1 概念"></a>1.2.1 概念</h5><p>SSR服务端渲染(Server-side Rendering),指在浏览器发起页面请求后由服务端完成页面的HTML结构拼接。</p><h5 id="1-2-2-流程"><a href="#1-2-2-流程" class="headerlink" title="1.2.2 流程"></a>1.2.2 流程</h5><p>将组件在服务端转化为HTML字符串，直接将其发送给浏览器，然后将其中静态标记”激活“为客户端上完全可交互的应用程序</p><h5 id="1-2-3-优缺点"><a href="#1-2-3-优缺点" class="headerlink" title="1.2.3 优缺点"></a>1.2.3 优缺点</h5><p><strong>优点</strong></p><ul><li>服务端直接输出HTML，SEO友好</li><li>加载首页无需加载整个应用的JS，首页加载速度快</li></ul><p><strong>缺点</strong></p><ul><li>页面每次跳转都要访问服务器，体验比客户端渲染差</li></ul><h3 id="二-服务端渲染实现"><a href="#二-服务端渲染实现" class="headerlink" title="二.服务端渲染实现"></a>二.服务端渲染实现</h3><p>要是实现一个完整的React-SSR渲染，要做的事如下</p><ul><li>服务端执行React代码，生成HTML页面，并将打包好的客户端js文件插入HTML页面中</li><li>发送HTML页面至浏览器展示</li><li>浏览器加载HTML页面中的js文件</li><li>js代码执行，并绑定DOM事件，最后接管页面操作</li></ul><p><strong>【负责】</strong></p><ul><li>客户端：事件绑定、路由跳转</li><li>服务端：请求数据、绑定动态数据、渲染生成HTML</li></ul><h3 id="三-React项目服务端渲染"><a href="#三-React项目服务端渲染" class="headerlink" title="三.React项目服务端渲染"></a>三.React项目服务端渲染</h3><blockquote><p>renderToString是react-dom/server提供的服务端渲染方法<br>renderToString、renderToStaticMarkup、renderToNodeStream、renderToStaticNodeStream四个方法能够将React组件渲染成静态的HTML标签，前两个方法能在客户端和服务端运行，后两个只能在服务端运行</p></blockquote><h4 id="3-1-实现一个React组件的服务端渲染"><a href="#3-1-实现一个React组件的服务端渲染" class="headerlink" title="3.1 实现一个React组件的服务端渲染"></a>3.1 实现一个React组件的服务端渲染</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> express frm <span class="string">&#x27;express&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;renderToString&#125; <span class="keyword">from</span> <span class="string">&#x27;react-dom/server&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./client/App&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> content = renderToString(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>)</span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</span><br><span class="line">    res.send(</span><br><span class="line">        <span class="string">`&lt;html&gt;</span></span><br><span class="line"><span class="string">            &lt;head&gt;&lt;title&gt;ssr&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">            &lt;body&gt;</span></span><br><span class="line"><span class="string">                &lt;div id=&quot;root&quot;&gt;<span class="subst">$&#123;content&#125;</span>&lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;/body&gt;</span></span><br><span class="line"><span class="string">        &lt;/html&gt;`</span></span><br><span class="line">    )</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">3000</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;listen:3000&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="3-2实现同构渲染"><a href="#3-2实现同构渲染" class="headerlink" title="3.2实现同构渲染"></a>3.2实现同构渲染</h4><p>实现以下两步:</p><ul><li>服务端可运行React代码</li><li>浏览器同样可运行React代码</li><li>两者共用一套React代码进行运行</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;浏览器解析过程&quot;&gt;&lt;a href=&quot;#浏览器解析过程&quot; class=&quot;headerlink&quot; title=&quot;浏览器解析过程&quot;&gt;&lt;/a&gt;浏览器解析过程&lt;/h3&gt;&lt;p&gt;从输入URL到页面渲染完成大致流程为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解析URL&lt;/li&gt;
&lt;li&gt;浏览器本地缓存&lt;/li&gt;
&lt;li&gt;DNS解析&lt;/li&gt;
&lt;li&gt;建立TCP/IP连接&lt;/li&gt;
&lt;li&gt;发送HTTP请求&lt;/li&gt;
&lt;li&gt;服务器处理请求并返回HTTP报文&lt;/li&gt;
&lt;li&gt;浏览器根据深度遍历的方式把html节点遍历构建DOM树&lt;/li&gt;
&lt;li&gt;遇到CSS外链，异步加载解析CSS,构建CSS规则树&lt;/li&gt;
&lt;li&gt;遇到script标签，如果是普通JS标签则同步加载并执行，阻塞页面渲染，如果标签上有defer/async属性则异步加载JS资源&lt;/li&gt;
&lt;li&gt;将dom树和CSS DOM树构造成render树&lt;/li&gt;
&lt;li&gt;渲染render树&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="react" scheme="https://chenshanshu.github.io/2020/06/15/hello-world/tags/react/"/>
    
      <category term="ssr" scheme="https://chenshanshu.github.io/2020/06/15/hello-world/tags/ssr/"/>
    
  </entry>
  
  <entry>
    <title>身份证号脱敏</title>
    <link href="https://chenshanshu.github.io/2020/06/15/hello-world/2023/12/12/%E8%BA%AB%E4%BB%BD%E8%AF%81%E5%8F%B7%E8%84%B1%E6%95%8F/"/>
    <id>https://chenshanshu.github.io/2020/06/15/hello-world/2023/12/12/%E8%BA%AB%E4%BB%BD%E8%AF%81%E5%8F%B7%E8%84%B1%E6%95%8F/</id>
    <published>2023-12-12T16:26:49.000Z</published>
    <updated>2025-02-07T05:41:08.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="非前后端分离项目"><a href="#非前后端分离项目" class="headerlink" title="非前后端分离项目"></a>非前后端分离项目</h3><style>    .question-box{        background:#B7F4EC;        color:#16004D;        padding:12px 10px;        font-weight:500;        user-select:none;        border-radius:6px;    }    .test-btn{        width: 80px;        text-align: center;        padding: 4px 10px;        border-radius: 6px;        background: #4CD263;        color: #ffffff;        cursor: pointer;        margin-left: auto;        user-select:none;    }    .test-btn:hover{        background: #7BE188;    }    .disable{        background: #86909c;        cursor: default;    }    .disable:hover{       background: #86909c;    }    .text-box{        background: #efefef;        border-radius: 6px;        padding:12px 10px;    }</style><div class="question-box">需求：找到网页上的身份证号并脱敏</div><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>321682199712237978<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是一段文字用来测试321682199712237978身份证号码<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    标签测试<span class="tag">&lt;<span class="name">span</span>&gt;</span>321682<span class="tag">&lt;<span class="name">em</span>&gt;</span>19971223<span class="tag">&lt;/<span class="name">em</span>&gt;</span>7978<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="身份证号的正则"><a href="#身份证号的正则" class="headerlink" title="身份证号的正则"></a>身份证号的正则</h4><ol><li>身份证开头两位是省级地址校验：<br>华北：北京11，天津12，河北13，山西14，内蒙古15<br>东北： 辽宁21，吉林22，黑龙江23<br>华东： 上海31，江苏32，浙江33，安徽34，福建35，江西36，山东37<br>华中： 河南41，湖北42，湖南43<br>华南： 广东44，广西45，海南46<br>西南： 四川51，贵州52，云南53，西藏54，重庆50<br>西北： 陕西61，甘肃62，青海63，宁夏64，新疆65<br>特别：台湾71，香港81，澳门82</li><li>年份校验：(18|19|20)\d{2}</li><li>日期校验：((0[1-9])|(1[0-2]))(([0-2][1-9])|10|20|30|31)</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^((<span class="number">1</span>[<span class="number">1</span>-<span class="number">5</span>])|(<span class="number">2</span>[<span class="number">1</span>-<span class="number">3</span>])|(<span class="number">3</span>[<span class="number">1</span>-<span class="number">7</span>])|(<span class="number">4</span>[<span class="number">1</span>-<span class="number">6</span>])|(<span class="number">5</span>[<span class="number">0</span>-<span class="number">4</span>])|(<span class="number">6</span>[<span class="number">1</span>-<span class="number">5</span>])|[<span class="number">7</span>-<span class="number">9</span>]<span class="number">1</span>)\d&#123;<span class="number">4</span>&#125;(<span class="number">18</span>|<span class="number">19</span>|<span class="number">20</span>)\d&#123;<span class="number">2</span>&#125;((<span class="number">0</span>[<span class="number">1</span>-<span class="number">9</span>])|(<span class="number">1</span>[<span class="number">0</span>-<span class="number">2</span>]))(([<span class="number">0</span>-<span class="number">2</span>][<span class="number">1</span>-<span class="number">9</span>])|<span class="number">10</span>|<span class="number">20</span>|<span class="number">30</span>|<span class="number">31</span>)\d&#123;<span class="number">3</span>&#125;[<span class="number">0</span>-9Xx]$/</span><br></pre></td></tr></table></figure><span id="more"></span><h4 id="怎么去遍历dom树"><a href="#怎么去遍历dom树" class="headerlink" title="怎么去遍历dom树"></a>怎么去遍历dom树</h4><ol><li><p>document.getElementsByTagName(‘*’);获取所有标签元素,可以直接forEach循环</p></li><li><p>使用递归</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">loop(<span class="built_in">document</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loop</span>(<span class="params">node</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> nodes = node.childNodes;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;nodes.length; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!nodes[i])&#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(nodes[i].childNodes.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            loop(nodes[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用document.createNodeIterator</p></li></ol><h4 id="怎么判断过滤完成"><a href="#怎么判断过滤完成" class="headerlink" title="怎么判断过滤完成"></a>怎么判断过滤完成</h4><ol><li>获取全文的文本：document.body.innerText</li><li>通过正则全文匹配</li></ol><h4 id="正则表达式分组命名"><a href="#正则表达式分组命名" class="headerlink" title="正则表达式分组命名"></a>正则表达式分组命名</h4><ol><li>我们用正则做局部替换时，常常用到$1,$2…，这些变量是匹配到的分组内容，当正则分组复杂时使用分组命名</li><li>(?&lt;自定义组名&gt;匹配的规则)</li></ol><h4 id="页面局部刷新后，怎么触发重新匹配"><a href="#页面局部刷新后，怎么触发重新匹配" class="headerlink" title="页面局部刷新后，怎么触发重新匹配"></a>页面局部刷新后，怎么触发重新匹配</h4><p>1.使用api：MutationObserver</p><h4 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filterIdNO</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> Reg1 = <span class="regexp">/(?&lt;first&gt;((1[1-5])|(2[1-3])|(3[1-7])|(4[1-6])|(5[0-4])|(6[1-5])|[7-9]1)\d&#123;4&#125;)((?&lt;year&gt;(18|19|20)\d&#123;2&#125;)((0[1-9])|(1[0-2]))(([0-2][1-9])|10|20|30|31))(?&lt;last&gt;\d&#123;3&#125;[0-9Xx])/g</span>;</span><br><span class="line">        <span class="keyword">var</span> Reg2 = <span class="regexp">/^((1[1-5])|(2[1-3])|(3[1-7])|(4[1-6])|(5[0-4])|(6[1-5])|[7-9]1)\d&#123;4&#125;(18|19|20)\d&#123;2&#125;((0[1-9])|(1[0-2]))(([0-2][1-9])|10|20|30|31)\d&#123;3&#125;[0-9Xx]$/</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">recursionDom</span>(<span class="params">parent</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> value = (parent.innerText || parent.textContent || <span class="string">&#x27;&#x27;</span>).replace(<span class="regexp">/\n/g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> (!value.match(Reg1)) <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">var</span> t = <span class="built_in">document</span>.createNodeIterator(parent, NodeFilter.SHOW_TEXT, <span class="literal">null</span>, <span class="literal">false</span>)</span><br><span class="line">            <span class="keyword">var</span> currNode = <span class="literal">null</span></span><br><span class="line">            <span class="keyword">var</span> mached = <span class="literal">null</span></span><br><span class="line">            <span class="keyword">while</span> ((currNode = t.nextNode()) !== <span class="literal">null</span>) &#123;</span><br><span class="line">                mached = Reg1.exec(currNode.textContent)</span><br><span class="line">                <span class="keyword">if</span> (Reg1.test(currNode.textContent)) &#123;</span><br><span class="line">                    currNode.textContent = currNode.textContent.replace(Reg1, <span class="function"><span class="keyword">function</span>(<span class="params">m</span>)</span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> m.slice(<span class="number">0</span>,<span class="number">6</span>)+<span class="string">&#x27;********&#x27;</span>+m.slice(-<span class="number">4</span>)</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            value = (parent.innerText || parent.textContent || <span class="string">&#x27;&#x27;</span>).replace(<span class="regexp">/\n/g</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> (!value.match(Reg1)) <span class="keyword">return</span></span><br><span class="line">            t = <span class="built_in">document</span>.createNodeIterator(parent, NodeFilter.SHOW_ELEMENT, <span class="literal">null</span>, <span class="literal">false</span>)</span><br><span class="line">            <span class="keyword">while</span> ((currNode = t.nextNode()) !== <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (Reg2.test(currNode.innerText)) &#123;    <span class="comment">// 从body开始匹配，不用严格会整个替换</span></span><br><span class="line">                    currNode.innerText = currNode.innerText.replace(Reg1, <span class="function"><span class="keyword">function</span>(<span class="params">m</span>)</span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> m.slice(<span class="number">0</span>,<span class="number">6</span>)+<span class="string">&#x27;********&#x27;</span>+m.slice(-<span class="number">4</span>)</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        recursionDom(<span class="built_in">document</span>.body)</span><br><span class="line">        <span class="keyword">var</span> observer = <span class="keyword">new</span> MutationObserver(<span class="function"><span class="keyword">function</span> (<span class="params">mutatinRecords</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// console.log(&#x27;mutatinRecords&#x27;, mutatinRecords)</span></span><br><span class="line">            mutatinRecords.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">                recursionDom(item.target)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">        observer.observe(<span class="built_in">document</span>.body, &#123; <span class="attr">childList</span>: <span class="literal">true</span>, <span class="attr">characterData</span>: <span class="literal">true</span>, <span class="attr">subtree</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;catch&#x27;</span>, error)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><div class="text-box">    <div>321682199712237978</div>    <div>这是一段文字用来测试321682199712237978身份证号码</div>    <div>321682<em>19971223</em>7978</div>    <div class="test-btn">测试一下</div></div><script type="text/javascript">    function filterIdNO() {            try {                var Reg1 = /(?<first>((1[1-5])|(2[1-3])|(3[1-7])|(4[1-6])|(5[0-4])|(6[1-5])|[7-9]1)\d{4})((?<year>(18|19|20)\d{2})((0[1-9])|(1[0-2]))(([0-2][1-9])|10|20|30|31))(?<last>\d{3}[0-9Xx])/g;                var Reg2 = /^((1[1-5])|(2[1-3])|(3[1-7])|(4[1-6])|(5[0-4])|(6[1-5])|[7-9]1)\d{4}(18|19|20)\d{2}((0[1-9])|(1[0-2]))(([0-2][1-9])|10|20|30|31)\d{3}[0-9Xx]$/;                function recursionDom(parent) {                    var value = (parent.innerText || parent.textContent || '').replace(/\n/g, '');                    if (!value.match(Reg1)) return                    var t = document.createNodeIterator(parent, NodeFilter.SHOW_TEXT, null, false)                    var currNode = null                    var mached = null                    while ((currNode = t.nextNode()) !== null) {                        if (Reg1.test(currNode.textContent)) {                            currNode.textContent = currNode.textContent.replace(Reg1, function(m){                                return m.slice(0,6)+'********'+m.slice(-4)                            })                        }                    }                    value = (parent.innerText || parent.textContent || '').replace(/\n/g, '');                    if (!value.match(Reg1)) return                    t = document.createNodeIterator(parent, NodeFilter.SHOW_ELEMENT, null, false)                    while ((currNode = t.nextNode()) !== null) {                        if (Reg2.test(currNode.innerText)) {    // 从body开始匹配，不用严格会整个替换                            currNode.innerText = currNode.innerText.replace(Reg1, function(m){                                return m.slice(0,6)+'********'+m.slice(-4)                            })                        }                    }                }                recursionDom(document.body)                var observer = new MutationObserver(function (mutatinRecords) {                    // console.log('mutatinRecords', mutatinRecords)                    mutatinRecords.forEach(function (item) {                        recursionDom(item.target)                    })                })                observer.observe(document.body, { childList: true, characterData: true, subtree: true })            } catch (error) {                console.log('catch', error)            }        }        document.getElementsByClassName('test-btn')[0].addEventListener('click',function(e){            if(window.afterObserver) return            e.target.classList.add('disable')            window.afterObserver = true            filterIdNO()        })</script><h3 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h3><p>移动端项目是前后端分离而且走了公共的请求方法；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> IdCardReg = <span class="regexp">/(?&lt;first&gt;((1[1-5])|(2[1-3])|(3[1-7])|(4[1-6])|(5[0-4])|(6[1-5])|[7-9]1)\d&#123;4&#125;)((?&lt;year&gt;(18|19|20)\d&#123;2&#125;)((0[1-9])|(1[0-2]))(([0-2][1-9])|10|20|30|31))(?&lt;last&gt;\d&#123;3&#125;[0-9Xx])/g</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cleanIdno</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> params) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> params[key] === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">cleanIdno(params[key])</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (IdCardReg.test(params[key])) &#123;</span><br><span class="line">params[key] = params[key].replace(IdCardReg, <span class="function"><span class="keyword">function</span> (<span class="params">m</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;m.slice(<span class="number">0</span>, <span class="number">6</span>)&#125;</span>********<span class="subst">$&#123;m.slice(-<span class="number">4</span>)&#125;</span>`</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> params</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> http = axios.create(options);</span><br><span class="line">http.interceptors.response.use(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(res.status == <span class="number">200</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> data = res.data;</span><br><span class="line">        <span class="keyword">return</span> data ? cleanIdno(data) : &#123;&#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(res)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;非前后端分离项目&quot;&gt;&lt;a href=&quot;#非前后端分离项目&quot; class=&quot;headerlink&quot; title=&quot;非前后端分离项目&quot;&gt;&lt;/a&gt;非前后端分离项目&lt;/h3&gt;&lt;style&gt;
    .question-box{
        background:#B7F4EC;
        color:#16004D;
        padding:12px 10px;
        font-weight:500;
        user-select:none;
        border-radius:6px;
    }
    .test-btn{
        width: 80px;
        text-align: center;
        padding: 4px 10px;
        border-radius: 6px;
        background: #4CD263;
        color: #ffffff;
        cursor: pointer;
        margin-left: auto;
        user-select:none;
    }
    .test-btn:hover{
        background: #7BE188;
    }
    .disable{
        background: #86909c;
        cursor: default;
    }
    .disable:hover{
       background: #86909c;
    }
    .text-box{
        background: #efefef;
        border-radius: 6px;
        padding:12px 10px;
    }
&lt;/style&gt;
&lt;div class=&quot;question-box&quot;&gt;需求：找到网页上的身份证号并脱敏&lt;/div&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;321682199712237978&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;这是一段文字用来测试321682199712237978身份证号码&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    标签测试&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;321682&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;em&lt;/span&gt;&amp;gt;&lt;/span&gt;19971223&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;em&lt;/span&gt;&amp;gt;&lt;/span&gt;7978&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&quot;身份证号的正则&quot;&gt;&lt;a href=&quot;#身份证号的正则&quot; class=&quot;headerlink&quot; title=&quot;身份证号的正则&quot;&gt;&lt;/a&gt;身份证号的正则&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;身份证开头两位是省级地址校验：&lt;br&gt;华北：北京11，天津12，河北13，山西14，内蒙古15&lt;br&gt;东北： 辽宁21，吉林22，黑龙江23&lt;br&gt;华东： 上海31，江苏32，浙江33，安徽34，福建35，江西36，山东37&lt;br&gt;华中： 河南41，湖北42，湖南43&lt;br&gt;华南： 广东44，广西45，海南46&lt;br&gt;西南： 四川51，贵州52，云南53，西藏54，重庆50&lt;br&gt;西北： 陕西61，甘肃62，青海63，宁夏64，新疆65&lt;br&gt;特别：台湾71，香港81，澳门82&lt;/li&gt;
&lt;li&gt;年份校验：(18|19|20)\d{2}&lt;/li&gt;
&lt;li&gt;日期校验：((0[1-9])|(1[0-2]))(([0-2][1-9])|10|20|30|31)&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;/^((&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;])|(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;])|(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;])|(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;])|(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;])|(&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;])|[&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;]&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)\d&amp;#123;&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&amp;#125;(&lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;|&lt;span class=&quot;number&quot;&gt;19&lt;/span&gt;|&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;)\d&amp;#123;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&amp;#125;((&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;])|(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]))(([&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;])|&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;|&lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;|&lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;|&lt;span class=&quot;number&quot;&gt;31&lt;/span&gt;)\d&amp;#123;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&amp;#125;[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;-9Xx]$/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
      <category term="正则" scheme="https://chenshanshu.github.io/2020/06/15/hello-world/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>nginx使用</title>
    <link href="https://chenshanshu.github.io/2020/06/15/hello-world/2023/10/31/nginx%E4%BD%BF%E7%94%A8/"/>
    <id>https://chenshanshu.github.io/2020/06/15/hello-world/2023/10/31/nginx%E4%BD%BF%E7%94%A8/</id>
    <published>2023-10-31T17:54:59.000Z</published>
    <updated>2025-02-07T05:41:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="nginx常用命令"><a href="#nginx常用命令" class="headerlink" title="nginx常用命令"></a>nginx常用命令</h2><ul><li>开启：<code>sudo nginx</code></li><li>重载：<code>nginx -s reload</code></li><li>关闭：<code>nginx -s quit</code></li><li>查找配置文件：<code>ngix -t</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;nginx常用命令&quot;&gt;&lt;a href=&quot;#nginx常用命令&quot; class=&quot;headerlink&quot; title=&quot;nginx常用命令&quot;&gt;&lt;/a&gt;nginx常用命令&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;开启：&lt;code&gt;sudo nginx&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>前端分享-2023-07-10</title>
    <link href="https://chenshanshu.github.io/2020/06/15/hello-world/2023/07/10/%E5%89%8D%E7%AB%AF%E5%88%86%E4%BA%AB-2023-07-10/"/>
    <id>https://chenshanshu.github.io/2020/06/15/hello-world/2023/07/10/%E5%89%8D%E7%AB%AF%E5%88%86%E4%BA%AB-2023-07-10/</id>
    <published>2023-07-10T16:32:23.000Z</published>
    <updated>2025-02-07T05:41:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="分享几个Web-API"><a href="#分享几个Web-API" class="headerlink" title="分享几个Web API"></a>分享几个Web API</h2><span id="more"></span><h3 id="Blob-API"><a href="#Blob-API" class="headerlink" title="Blob API"></a>Blob API</h3><p>Blob API 用于处理二进制数据，可以方便地将数据转换为Blob对象或从Blob对象读取数据。<br>使用场景：在Web应用中，可能需要上传或下载二进制文件，使用Blob API可以方便地处理这些数据。</p><h4 id="使用blob实现文件下载"><a href="#使用blob实现文件下载" class="headerlink" title="使用blob实现文件下载"></a>使用blob实现文件下载</h4><p>下载一个html文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> html = <span class="string">`</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;p&gt;123&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span> </span><br><span class="line"><span class="keyword">const</span> myBlob  = <span class="keyword">new</span> Blob([html],&#123;<span class="attr">type</span>: <span class="string">&#x27;text/html&#x27;</span>&#125;);</span><br><span class="line"><span class="keyword">const</span> oa = <span class="built_in">document</span>.createElement(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">oa.href = URL.createObjectURL(blob);</span><br><span class="line">oa.download = <span class="string">&#x27;index.html&#x27;</span>;</span><br><span class="line">oa.click();</span><br></pre></td></tr></table></figure><p>下载一个excell(这个下载的是个假的excel文件，只有xls格式可以在Excel中打开)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//blob URL形式文件下载</span></span><br><span class="line"><span class="keyword">var</span> tableHtml=<span class="string">&#x27;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;UTF-8&quot;&gt;&lt;/head&gt;&lt;body&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;only one&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> excelBlob = <span class="keyword">new</span> Blob([tableHtml], &#123;<span class="attr">type</span>: <span class="string">&#x27;application/vnd.ms-excel&#x27;</span>&#125;);</span><br><span class="line"><span class="keyword">var</span> oa = <span class="built_in">document</span>.createElement(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">oa.href = URL.createObjectURL(excelBlob);</span><br><span class="line">oa.download = <span class="string">&#x27;htmltable-blob.xls&#x27;</span>;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(oa);</span><br><span class="line">oa.click();</span><br></pre></td></tr></table></figure><h4 id="使用blob实现图片预览"><a href="#使用blob实现图片预览" class="headerlink" title="使用blob实现图片预览"></a>使用blob实现图片预览</h4><p>这里对比一下createObjectURL()和readAsDataURL()的区别，两种方法都可以实现图片预览</p><table><thead><tr><th></th><th>FileReader.readAsDataURL(file)</th><th>URL.createObjectURL(file)</th></tr></thead><tbody><tr><td>返回值</td><td>得到一段data:base64的字符串</td><td>得到当前文件的一个内存URL</td></tr><tr><td>内存使用</td><td>返回值是转化后的超长base64字符串(长度与要解析的文件大小正相关)并会比blob url消耗更多内存，但是在不用的时候会自动从内存中清除（通过垃圾回收机制）</td><td>createObjectURL返回一段带hash的url，并且一直存储在内存中，直到document触发了unload事件（例如：document close）或者执行revokeObjectURL来释放。</td></tr><tr><td>内存清理</td><td>依照JS垃圾回收机制自动从内存中清理</td><td>存在于当前doucment内，清除方式只有unload()事件或revokeObjectURL()手动清除</td></tr><tr><td>执行机制</td><td>异步执行</td><td>同步执行</td></tr><tr><td>其他</td><td>当多个文件同时处理时，需要每一个文件对应一个新的FileReader对象</td><td>依次返回无影响</td></tr><tr><td>兼容性</td><td>ie10以上的浏览器</td><td>ie10以上的浏览器</td></tr></tbody></table><p>使用方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reader = <span class="keyword">new</span> FileReader();</span><br><span class="line">reader.readAsDataURL(file);</span><br><span class="line">reader.onload = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(reader.result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> blobUrl = URL.createObjectURL(blob);</span><br></pre></td></tr></table></figure><h3 id="WeakSet"><a href="#WeakSet" class="headerlink" title="WeakSet"></a>WeakSet</h3><p>类似于Set，但可以存储弱引用的对象。这意味着，如果没有其他引用指向一个对象，那么这个对象可以被垃圾回收器回收，而不需要手动从WeakSet中删除。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myWeakSet = <span class="keyword">new</span> <span class="built_in">WeakSet</span>();</span><br><span class="line"><span class="keyword">const</span> obj1 = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;&#125;;</span><br><span class="line">myWeakSet.add(obj1);</span><br><span class="line">myWeakSet.add(obj2);</span><br><span class="line"><span class="built_in">console</span>.log(myWeakSet.has(obj1)); <span class="comment">// true</span></span><br><span class="line">obj1 = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">console</span>.log(myWeakSet.has(obj1)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>使用场景：在某些情况下，可能需要存储一些临时的对象，但又不希望这些对象占用太多的内存。使用WeakSet可以方便地管理这些对象。</p><h3 id="TextEncoder-和-TextDecoder"><a href="#TextEncoder-和-TextDecoder" class="headerlink" title="TextEncoder 和 TextDecoder"></a>TextEncoder 和 TextDecoder</h3><p>TextEncoder 和 TextDecoder 用于处理字符串和字节序列之间的转换。它们可以方便地将字符串编码为字节序列或将字节序列解码为字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> encoder = <span class="keyword">new</span> TextEncoder();</span><br><span class="line"><span class="keyword">const</span> decoder = <span class="keyword">new</span> TextDecoder();</span><br><span class="line"><span class="keyword">const</span> myString = <span class="string">&quot;Hello, world!&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> myBuffer = encoder.encode(myString);</span><br><span class="line"><span class="built_in">console</span>.log(myBuffer); <span class="comment">// Uint8Array(13) [72, 101, 108, 108, 111, 44, 32, 119, 111, 114, 108, 100, 33]</span></span><br><span class="line"><span class="keyword">const</span> decodedString = decoder.decode(myBuffer);</span><br><span class="line"><span class="built_in">console</span>.log(decodedString); <span class="comment">// &quot;Hello, world!&quot;</span></span><br></pre></td></tr></table></figure><p>使用场景：在Web应用中，可能需要将字符串转换为二进制数据，或将二进制数据转换为字符串。使用TextEncoder和TextDecoder可以方便地进行这些转换。</p><h3 id="Proxy-API"><a href="#Proxy-API" class="headerlink" title="Proxy API"></a>Proxy API</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myObject = &#123;</span><br><span class="line"> <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line"> <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> myProxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(myObject, &#123;</span><br><span class="line"> <span class="function"><span class="title">get</span>(<span class="params">target, property</span>)</span> &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">`Getting property <span class="subst">$&#123;property&#125;</span>`</span>);</span><br><span class="line"> <span class="keyword">return</span> target[property];</span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="function"><span class="title">set</span>(<span class="params">target, property, value</span>)</span> &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">`Setting property <span class="subst">$&#123;property&#125;</span> to <span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line"> target[property] = value;</span><br><span class="line"> &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(myProxy.name); <span class="comment">// &quot;John&quot;</span></span><br><span class="line">myProxy.age = <span class="number">31</span>; <span class="comment">// Setting property age to 31</span></span><br></pre></td></tr></table></figure><p>使用场景：在某些情况下，可能需要拦截对象属性的读取、赋值等操作，以实现更高级的功能。使用Proxy API可以方便地实现这些功能。</p><h3 id="Object-entries-和-Object-values"><a href="#Object-entries-和-Object-values" class="headerlink" title="Object.entries() 和 Object.values()"></a>Object.entries() 和 Object.values()</h3><p>Object.entries() 用于获取对象的可枚举属性和值的数组，Object.values() 用于获取对象的可枚举属性值的数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myObject = &#123;</span><br><span class="line"> <span class="attr">name</span>: <span class="string">&quot;John&quot;</span>,</span><br><span class="line"> <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.entries(myObject)); <span class="comment">// [[&quot;name&quot;, &quot;John&quot;], [&quot;age&quot;, 30]]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(myObject)); <span class="comment">// [&quot;John&quot;, 30]</span></span><br></pre></td></tr></table></figure><p>使用场景：在某些情况下，可能需要获取对象的可枚举属性或属性值。使用Object.entries()和Object.values()可以方便地实现这些功能。</p><h3 id="IntersectionObserver"><a href="#IntersectionObserver" class="headerlink" title="IntersectionObserver"></a>IntersectionObserver</h3><p>IntersectionObserver 可以用于检测元素是否进入视口，可以用于实现无限滚动、懒加载等功能。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myObserver = <span class="keyword">new</span> IntersectionObserver(<span class="function">(<span class="params">entries, observer</span>) =&gt;</span> &#123;</span><br><span class="line"> entries.forEach(<span class="function">(<span class="params">entry</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">if</span> (entry.isIntersecting) &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;entry.target.id&#125;</span> is now visible`</span>);</span><br><span class="line"> observer.unobserve(entry.target);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> myElement = <span class="built_in">document</span>.getElementById(<span class="string">&quot;myElement&quot;</span>);</span><br><span class="line">myObserver.observe(myElement);</span><br></pre></td></tr></table></figure><p>使用场景：在Web应用中，可能需要实现无限滚动、懒加载等功能，使用IntersectionObserver可以方便地实现这些功能。</p><h3 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h3><p>Symbol 可以用于创建唯一标识符，可以用于定义对象的私有属性或方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mySymbol = <span class="built_in">Symbol</span>(<span class="string">&quot;mySymbol&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> myObject = &#123;</span><br><span class="line"> [mySymbol]: <span class="string">&quot;This is a private property&quot;</span>,</span><br><span class="line"> <span class="attr">publicProperty</span>: <span class="string">&quot;This is a public property&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(myObject[mySymbol]); <span class="comment">// &quot;This is a private property&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(myObject.publicProperty); <span class="comment">// &quot;This is a public property&quot;</span></span><br></pre></td></tr></table></figure><p>使用场景：在某些情况下，可能需要定义对象的私有属性或方法，使用Symbol可以方便地实现这些功能。</p><h3 id="Reflect-API"><a href="#Reflect-API" class="headerlink" title="Reflect API"></a>Reflect API</h3><p>Reflect API 可以用于实现元编程，例如动态调用对象的方法或构造函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="title">constructor</span>(<span class="params">value</span>)</span> &#123;</span><br><span class="line"> <span class="built_in">this</span>.value = value;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="function"><span class="title">getValue</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="built_in">this</span>.value;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> myObject = <span class="built_in">Reflect</span>.construct(MyClass, [<span class="string">&quot;Hello, world!&quot;</span>]);</span><br><span class="line"><span class="keyword">const</span> myMethod = <span class="built_in">Reflect</span>.get(myObject, <span class="string">&quot;getValue&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> myValue = myMethod.call(myObject);</span><br><span class="line"><span class="built_in">console</span>.log(myValue); <span class="comment">// &quot;Hello, world!&quot;</span></span><br></pre></td></tr></table></figure><p>使用场景：在某些情况下，可能需要动态调用对象的方法或构造函数，使用Reflect API可以方便地实现这些功能。</p><h3 id="Generator-API"><a href="#Generator-API" class="headerlink" title="Generator API"></a>Generator API</h3><p>Generator API 可以用于生成迭代器，可以用于实现异步操作或惰性计算。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">myGenerator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">yield</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"> <span class="keyword">yield</span> <span class="string">&quot;world&quot;</span>;</span><br><span class="line"> <span class="keyword">yield</span> <span class="string">&quot;!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> myIterator = myGenerator();</span><br><span class="line"><span class="built_in">console</span>.log(myIterator.next().value); <span class="comment">// &quot;Hello&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(myIterator.next().value); <span class="comment">// &quot;world&quot;</span></span><br><span class="line"><span class="built_in">console</span>.log(myIterator.next().value); <span class="comment">// &quot;!&quot;</span></span><br></pre></td></tr></table></figure><p>使用场景：在某些情况下，可能需要实现异步操作或惰性计算，使用Generator API可以方便地实现这些功能。</p><h3 id="Web-Workers"><a href="#Web-Workers" class="headerlink" title="Web Workers"></a>Web Workers</h3><p>Web Workers 可以用于在后台线程中执行JavaScript代码，可以用于提高性能或实现复杂的计算。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">const</span> myWorker = <span class="keyword">new</span> Worker(<span class="string">&quot;worker.js&quot;</span>);</span><br><span class="line">myWorker.postMessage(<span class="string">&quot;Hello, worker!&quot;</span>);</span><br><span class="line">myWorker.onmessage = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">`Message received from worker: <span class="subst">$&#123;event.data&#125;</span>`</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// worker.js</span></span><br><span class="line">onmessage = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">`Message received in worker: <span class="subst">$&#123;event.data&#125;</span>`</span>);</span><br><span class="line"> postMessage(<span class="string">&quot;Hello, main!&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用场景：在Web应用中，可能需要处理大量计算密集型任务或执行长时间运行的操作，使用Web Workers可以提高性能或避免阻塞用户界面。</p><h3 id="AudioContext"><a href="#AudioContext" class="headerlink" title="AudioContext"></a>AudioContext</h3><p>AudioContext 可以用于处理音频，可以用于实现音频播放、音效处理等功能。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> audioContext = <span class="keyword">new</span> AudioContext();</span><br><span class="line">fetch(<span class="string">&quot;https://example.com/audio.mp3&quot;</span>)</span><br><span class="line"> .then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.arrayBuffer())</span><br><span class="line"> .then(<span class="function">(<span class="params">arrayBuffer</span>) =&gt;</span> audioContext.decodeAudioData(arrayBuffer))</span><br><span class="line"> .then(<span class="function">(<span class="params">audioBuffer</span>) =&gt;</span> &#123;</span><br><span class="line"> <span class="keyword">const</span> source = audioContext.createBufferSource();</span><br><span class="line"> source.buffer = audioBuffer;</span><br><span class="line"> source.connect(audioContext.destination);</span><br><span class="line"> source.start();</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><p>使用场景：在Web应用中，可能需要实现音频播放、音效处理等功能，使用AudioContext可以方便地实现这些功能。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;分享几个Web-API&quot;&gt;&lt;a href=&quot;#分享几个Web-API&quot; class=&quot;headerlink&quot; title=&quot;分享几个Web API&quot;&gt;&lt;/a&gt;分享几个Web API&lt;/h2&gt;
    
    </summary>
    
    
      <category term="分享" scheme="https://chenshanshu.github.io/2020/06/15/hello-world/categories/%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="前端" scheme="https://chenshanshu.github.io/2020/06/15/hello-world/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>前端分享-2023-05-15</title>
    <link href="https://chenshanshu.github.io/2020/06/15/hello-world/2023/05/15/%E5%89%8D%E7%AB%AF%E5%88%86%E4%BA%AB-2023-05-15/"/>
    <id>https://chenshanshu.github.io/2020/06/15/hello-world/2023/05/15/%E5%89%8D%E7%AB%AF%E5%88%86%E4%BA%AB-2023-05-15/</id>
    <published>2023-05-15T16:38:54.000Z</published>
    <updated>2025-02-07T05:41:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用div模拟一个不可编辑的input"><a href="#使用div模拟一个不可编辑的input" class="headerlink" title="使用div模拟一个不可编辑的input"></a>使用div模拟一个不可编辑的input</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> class=&quot;<span class="selector-tag">input</span>-item&quot; placeholder=&quot;点击添加查询企业&quot;&gt;&#123;&#123; company &#125;&#125;&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line"><span class="selector-class">.input-item</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">790px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">128px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">128px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">42px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333333</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line"></span><br><span class="line">    &amp;<span class="selector-pseudo">:empty</span>:after &#123;</span><br><span class="line">        display: block;</span><br><span class="line">        <span class="attribute">content</span>: attr(placeholder);</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">128px</span>;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#999999</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="元素overflow-hidden后，弹窗定位问题"><a href="#元素overflow-hidden后，弹窗定位问题" class="headerlink" title="元素overflow:hidden后，弹窗定位问题"></a>元素overflow:hidden后，弹窗定位问题</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 绝对定位元素不总是被父级 overflow 属性裁剪 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div1&quot;</span> <span class="attr">style</span>=<span class="string">&quot;overflow: hidden;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div2&quot;</span> <span class="attr">style</span>=<span class="string">&quot;position: absolute;&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 尤其是当 overflow 在绝对定位元素及其包含块之间的时候 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div3&quot;</span> <span class="attr">style</span>=<span class="string">&quot;position: relative;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div4&quot;</span> <span class="attr">style</span>=<span class="string">&quot;overflow: hidden;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;div5&quot;</span> <span class="attr">style</span>=<span class="string">&quot;position: absolute;&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当绝对定位相对于overflow外层的元素定位时，元素不会被裁剪<br>另一种方式时使用fixed定位</p><span id="more"></span><h2 id="JS-的-6-种加载方式"><a href="#JS-的-6-种加载方式" class="headerlink" title="JS 的 6 种加载方式"></a>JS 的 6 种加载方式</h2><ol><li>正常模式</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;index.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>这种情况下 JS 会阻塞 dom 渲染，浏览器必须等待 index.js 加载和执行完成后才能去做其它事情</p><ol start="2"><li>async 模式</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script <span class="keyword">async</span> src=<span class="string">&quot;index.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>async 模式下，它的加载是异步的，JS 不会阻塞 DOM 的渲染，async 加载是无顺序的，当它加载结束，JS 会立即执行</p><p>使用场景：若该 JS 资源与 DOM 元素没有依赖关系，也不会产生其他资源所需要的数据时，可以使用 async 模式，比如埋点统计</p><ol start="3"><li>defer 模式</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script defer src=<span class="string">&quot;index.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>defer 模式下，JS 的加载也是异步的，defer 资源会在  DOMContentLoaded  执行之前，并且 defer 是有顺序的加载</p><p>如果有多个设置了 defer 的 script 标签存在，则会按照引入的前后顺序执行，即便是后面的 script 资源先返回</p><p>所以 defer 可以用来控制 JS 文件的执行顺序，比如 element-ui.js 和 vue.js，因为 element-ui.js 依赖于 vue，所以必须先引入 vue.js，再引入 element-ui.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script defer src=<span class="string">&quot;vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">defer</span> <span class="attr">src</span>=<span class="string">&quot;element-ui.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>defer 使用场景：一般情况下都可以使用 defer，特别是需要控制资源加载顺序时</p><ol start="4"><li>module 模式</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;module&quot;</span>&gt;<span class="keyword">import</span> &#123; a &#125; <span class="keyword">from</span> <span class="string">&#x27;./a.js&#x27;</span>&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>在主流的现代浏览器中，script 标签的属性可以加上  type=”module”，浏览器会对其内部的 import 引用发起 HTTP 请求，获取模块内容。这时 script 的行为会像是  defer 一样，在后台下载，并且等待 DOM 解析</p><p>Vite 就是利用浏览器支持原生的 es module 模块，开发时跳过打包的过程，提升编译效率</p><ol start="5"><li>preload</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=<span class="string">&quot;preload&quot;</span> <span class="keyword">as</span>=<span class="string">&quot;script&quot;</span> href=<span class="string">&quot;index.js&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>link 标签的 preload 属性：用于提前加载一些需要的依赖，这些资源会优先加载<br>vue2 项目打包生成的 index.html 文件，会自动给首页所需要的资源，全部添加 preload，实现关键资源的提前加载</p><p>preload 特点：</p><ul><li>preload 加载的资源是在浏览器渲染机制之前进行处理的，并且不会阻塞 onload 事件；</li><li>preload 加载的 JS 脚本其加载和执行的过程是分离的，即 preload 会预加载相应的脚本代码，待到需要时自行调用；</li></ul><ol start="6"><li>prefetch</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=<span class="string">&quot;prefetch&quot;</span> <span class="keyword">as</span>=<span class="string">&quot;script&quot;</span> href=<span class="string">&quot;index.js&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>prefetch 是利用浏览器的空闲时间，加载页面将来可能用到的资源的一种机制；通常可以用于加载其他页面（非首页）所需要的资源，以便加快后续页面的打开速度</p><p>prefetch 特点：</p><ul><li><p>pretch 加载的资源可以获取非当前页面所需要的资源，并且将其放入缓存至少 5 分钟（无论资源是否可以缓存）</p></li><li><p>当页面跳转时，未完成的 prefetch 请求不会被中断</p></li></ul><p>加载方式总结<br>async、defer 是  script 标签的专属属性，对于网页中的其他资源，可以通过  link  的 preload、prefetch  属性来预加载</p><p>如今现代框架已经将 preload、prefetch 添加到打包流程中了，通过灵活的配置，去使用这些预加载功能，同时我们也可以审时度势地向 script 标签添加 async、defer 属性去处理资源，这样可以显著提升性能</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;使用div模拟一个不可编辑的input&quot;&gt;&lt;a href=&quot;#使用div模拟一个不可编辑的input&quot; class=&quot;headerlink&quot; title=&quot;使用div模拟一个不可编辑的input&quot;&gt;&lt;/a&gt;使用div模拟一个不可编辑的input&lt;/h2&gt;&lt;figure class=&quot;highlight scss&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;selector-tag&quot;&gt;div&lt;/span&gt; class=&amp;quot;&lt;span class=&quot;selector-tag&quot;&gt;input&lt;/span&gt;-item&amp;quot; placeholder=&amp;quot;点击添加查询企业&amp;quot;&amp;gt;&amp;#123;&amp;#123; company &amp;#125;&amp;#125;&amp;lt;/&lt;span class=&quot;selector-tag&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.input-item&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;790px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;128px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;line-height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;128px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;overflow&lt;/span&gt;: hidden;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;white-space&lt;/span&gt;: nowrap;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;text-overflow&lt;/span&gt;: ellipsis;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;font-size&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;42px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#333333&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;: relative;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;amp;&lt;span class=&quot;selector-pseudo&quot;&gt;:empty&lt;/span&gt;:after &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        display: block;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;: attr(placeholder);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;: absolute;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;left&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;top&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;100%&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;128px&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#999999&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;元素overflow-hidden后，弹窗定位问题&quot;&gt;&lt;a href=&quot;#元素overflow-hidden后，弹窗定位问题&quot; class=&quot;headerlink&quot; title=&quot;元素overflow:hidden后，弹窗定位问题&quot;&gt;&lt;/a&gt;元素overflow:hidden后，弹窗定位问题&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 绝对定位元素不总是被父级 overflow 属性裁剪 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;div1&amp;quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;overflow: hidden;&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;div2&amp;quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;position: absolute;&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;1&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 尤其是当 overflow 在绝对定位元素及其包含块之间的时候 --&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;div3&amp;quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;position: relative;&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;div4&amp;quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;overflow: hidden;&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;div5&amp;quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;style&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;quot;position: absolute;&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;2&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;当绝对定位相对于overflow外层的元素定位时，元素不会被裁剪&lt;br&gt;另一种方式时使用fixed定位&lt;/p&gt;
    
    </summary>
    
    
      <category term="分享" scheme="https://chenshanshu.github.io/2020/06/15/hello-world/categories/%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="技巧" scheme="https://chenshanshu.github.io/2020/06/15/hello-world/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>如何使用svg图标</title>
    <link href="https://chenshanshu.github.io/2020/06/15/hello-world/2023/04/20/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8svg%E5%9B%BE%E6%A0%87/"/>
    <id>https://chenshanshu.github.io/2020/06/15/hello-world/2023/04/20/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8svg%E5%9B%BE%E6%A0%87/</id>
    <published>2023-04-20T10:06:10.000Z</published>
    <updated>2025-02-07T05:41:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为何要使用字体图标"><a href="#为何要使用字体图标" class="headerlink" title="为何要使用字体图标"></a>为何要使用字体图标</h2><ol><li>字体图标更改大小和颜色方便</li><li>使得网站整体风格统一</li><li>减少网络请求，而使用图片切换时不流畅</li></ol><blockquote><p>UI在线设计工作fiama、蓝湖等可以直接下载svg文件,一些字体库也可以直接下载</p></blockquote><h2 id="怎么将psd中的图标切成svg"><a href="#怎么将psd中的图标切成svg" class="headerlink" title="怎么将psd中的图标切成svg"></a>怎么将psd中的图标切成svg</h2><h3 id="ps直接导出为svg"><a href="#ps直接导出为svg" class="headerlink" title="ps直接导出为svg"></a>ps直接导出为svg</h3><p>如果不是矢量图，导出的结果是往svg里插入了一张base64图片</p><h3 id="怎么把图片转为矢量图"><a href="#怎么把图片转为矢量图" class="headerlink" title="怎么把图片转为矢量图"></a>怎么把图片转为矢量图</h3><ol><li><p>使用ps</p><ul><li>ps打开图片，使用选择【菜单】-【色彩范围】</li><li>直到选中图片上需要的部分，右键建立工作路径</li><li>这个时候发现选中的部分被钢笔工具圈出来了，但一般会有误差</li><li>然后选中【编辑】-【自定形状】</li><li>新建一个空白图层把这个形状添加进去，然后就可以导出了</li></ul></li><li><p>Adobe Illustrator</p><ul><li>将图片导入软件，选择【对象】-【图像描摹】-【建立并拓展】功能</li><li>软件就能描摹图片线条，并且生成对应的矢量图。然后我们右键单击图片，选择【收集以导出】-【作为单个资源】</li></ul></li><li><p>Vector Magic</p><ul><li>这款工具是专门做矢量图的不多介绍了</li></ul></li><li><p>一个工具包 potrace</p><ul><li><p>py和node环境都有对应的依赖包，这里以node环境举例：</p></li><li><p>npm install potrace</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> potrace = <span class="built_in">require</span>(<span class="string">&#x27;potrace&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> params = &#123;</span><br><span class="line">    <span class="comment">// background: &#x27;#49ffd2&#x27;,</span></span><br><span class="line">    <span class="comment">// color: &#x27;blue&#x27;,</span></span><br><span class="line">    <span class="comment">// threshold: 120</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> dir = path.resolve(<span class="string">&#x27;./pictures&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> (!fs.existsSync(<span class="string">&#x27;./output&#x27;</span>)) &#123;</span><br><span class="line">    fs.mkdirSync(<span class="string">&#x27;output&#x27;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fs.readdirSync(<span class="string">&#x27;output&#x27;</span>).forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        fs.unlinkSync(path.resolve(<span class="string">&#x27;./output&#x27;</span>, item))</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fs.readdirSync(dir).forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    potrace.trace(path.join(dir, item), params, <span class="function"><span class="keyword">function</span> (<span class="params">err, svg</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">        <span class="keyword">const</span> file = <span class="string">&#x27;./output/&#x27;</span> + item.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>] + <span class="string">&#x27;.svg&#x27;</span></span><br><span class="line">        fs.writeFileSync(file, svg)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;写入文件&#x27;</span>, file)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;success&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ol><span id="more"></span><h3 id="怎么在项目中使用"><a href="#怎么在项目中使用" class="headerlink" title="怎么在项目中使用"></a>怎么在项目中使用</h3><h4 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h4><p>在webpack项目中使用WebpackIconfontPluginNodejs插件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> WebpackIconfontPluginNodejs = <span class="built_in">require</span>(<span class="string">&#x27;webpack-iconfont-plugin-nodejs&#x27;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line"><span class="keyword">var</span> iconDir = <span class="string">&#x27;src/iconfont&#x27;</span>;</span><br><span class="line">configureWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">  config.plugins.push(<span class="keyword">new</span> WebpackIconfontPluginNodejs(&#123;</span><br><span class="line">   <span class="attr">fontName</span>: <span class="string">&#x27;pingan-icons&#x27;</span>,</span><br><span class="line">   <span class="attr">cssPrefix</span>: <span class="string">&#x27;ico&#x27;</span>,</span><br><span class="line">   <span class="attr">svgs</span>: path.join(iconDir, <span class="string">&#x27;svgs/*.svg&#x27;</span>),</span><br><span class="line">   <span class="attr">fontsOutput</span>: path.join(iconDir, <span class="string">&#x27;fonts/&#x27;</span>),</span><br><span class="line">   <span class="attr">cssOutput</span>: path.join(iconDir, <span class="string">&#x27;fonts/font.css&#x27;</span>),</span><br><span class="line">   <span class="attr">htmlOutput</span>: path.join(iconDir, <span class="string">&#x27;fonts/_font-preview.html&#x27;</span>),</span><br><span class="line">   <span class="attr">jsOutput</span>: path.join(iconDir, <span class="string">&#x27;fonts/fonts.js&#x27;</span>),</span><br><span class="line">   <span class="attr">formats</span>: [<span class="string">&#x27;ttf&#x27;</span>, <span class="string">&#x27;woff&#x27;</span>, <span class="string">&#x27;svg&#x27;</span>],</span><br><span class="line">  &#125;));</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="vite"><a href="#vite" class="headerlink" title="vite"></a>vite</h4><p>vite.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createSvgIconsPlugin &#125; <span class="keyword">from</span> <span class="string">&#x27;vite-plugin-svg-icons&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">plugins</span>: [</span><br><span class="line">            createSvgIconsPlugin(&#123;</span><br><span class="line">                <span class="attr">iconDirs</span>: [</span><br><span class="line">                    resolve(process.cwd(), <span class="string">&#x27;src/icons&#x27;</span>)</span><br><span class="line">                ],</span><br><span class="line">                <span class="attr">symbolId</span>: <span class="string">&#x27;icon-[dir]-[name]&#x27;</span>,</span><br><span class="line">                <span class="attr">customDomId</span>: <span class="string">&#x27;__svg__icons__dom__&#x27;</span>,</span><br><span class="line">            &#125;),</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>然后定义一个icon组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;svg aria-hidden=&quot;true&quot; class=&quot;svg-icon&quot;&gt;</span><br><span class="line">    &lt;use :xlink:href=&quot;symbolId&quot; /&gt;</span><br><span class="line">  &lt;/svg&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; defineComponent, computed &#125; from &#x27;vue&#x27;</span><br><span class="line">export default defineComponent(&#123;</span><br><span class="line">  name: &#x27;SvgIcon&#x27;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    prefix: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      default: &#x27;icon&#x27;,</span><br><span class="line">    &#125;,</span><br><span class="line">    name: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      required: true,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  setup(props) &#123;</span><br><span class="line">    const symbolId = computed(() =&gt; `#$&#123;props.prefix&#125;-$&#123;props.name&#125;`)</span><br><span class="line">    return &#123; symbolId &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.svg-icon &#123;</span><br><span class="line">  width: 1em;</span><br><span class="line">  height: 1em;</span><br><span class="line">  vertical-align: -0.15em;</span><br><span class="line">  fill: currentColor;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;为何要使用字体图标&quot;&gt;&lt;a href=&quot;#为何要使用字体图标&quot; class=&quot;headerlink&quot; title=&quot;为何要使用字体图标&quot;&gt;&lt;/a&gt;为何要使用字体图标&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;字体图标更改大小和颜色方便&lt;/li&gt;
&lt;li&gt;使得网站整体风格统一&lt;/li&gt;
&lt;li&gt;减少网络请求，而使用图片切换时不流畅&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;UI在线设计工作fiama、蓝湖等可以直接下载svg文件,一些字体库也可以直接下载&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;怎么将psd中的图标切成svg&quot;&gt;&lt;a href=&quot;#怎么将psd中的图标切成svg&quot; class=&quot;headerlink&quot; title=&quot;怎么将psd中的图标切成svg&quot;&gt;&lt;/a&gt;怎么将psd中的图标切成svg&lt;/h2&gt;&lt;h3 id=&quot;ps直接导出为svg&quot;&gt;&lt;a href=&quot;#ps直接导出为svg&quot; class=&quot;headerlink&quot; title=&quot;ps直接导出为svg&quot;&gt;&lt;/a&gt;ps直接导出为svg&lt;/h3&gt;&lt;p&gt;如果不是矢量图，导出的结果是往svg里插入了一张base64图片&lt;/p&gt;
&lt;h3 id=&quot;怎么把图片转为矢量图&quot;&gt;&lt;a href=&quot;#怎么把图片转为矢量图&quot; class=&quot;headerlink&quot; title=&quot;怎么把图片转为矢量图&quot;&gt;&lt;/a&gt;怎么把图片转为矢量图&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;使用ps&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ps打开图片，使用选择【菜单】-【色彩范围】&lt;/li&gt;
&lt;li&gt;直到选中图片上需要的部分，右键建立工作路径&lt;/li&gt;
&lt;li&gt;这个时候发现选中的部分被钢笔工具圈出来了，但一般会有误差&lt;/li&gt;
&lt;li&gt;然后选中【编辑】-【自定形状】&lt;/li&gt;
&lt;li&gt;新建一个空白图层把这个形状添加进去，然后就可以导出了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Adobe Illustrator&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将图片导入软件，选择【对象】-【图像描摹】-【建立并拓展】功能&lt;/li&gt;
&lt;li&gt;软件就能描摹图片线条，并且生成对应的矢量图。然后我们右键单击图片，选择【收集以导出】-【作为单个资源】&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Vector Magic&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这款工具是专门做矢量图的不多介绍了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一个工具包 potrace&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;py和node环境都有对应的依赖包，这里以node环境举例：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;npm install potrace&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; potrace = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;potrace&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; fs = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;fs&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; path = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;path&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; params = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// background: &amp;#x27;#49ffd2&amp;#x27;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// color: &amp;#x27;blue&amp;#x27;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// threshold: 120&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; dir = path.resolve(&lt;span class=&quot;string&quot;&gt;&amp;#x27;./pictures&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!fs.existsSync(&lt;span class=&quot;string&quot;&gt;&amp;#x27;./output&amp;#x27;&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fs.mkdirSync(&lt;span class=&quot;string&quot;&gt;&amp;#x27;output&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fs.readdirSync(&lt;span class=&quot;string&quot;&gt;&amp;#x27;output&amp;#x27;&lt;/span&gt;).forEach(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;item&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        fs.unlinkSync(path.resolve(&lt;span class=&quot;string&quot;&gt;&amp;#x27;./output&amp;#x27;&lt;/span&gt;, item))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fs.readdirSync(dir).forEach(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;item&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    potrace.trace(path.join(dir, item), params, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;err, svg&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (err) &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; err;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; file = &lt;span class=&quot;string&quot;&gt;&amp;#x27;./output/&amp;#x27;&lt;/span&gt; + item.split(&lt;span class=&quot;string&quot;&gt;&amp;#x27;.&amp;#x27;&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] + &lt;span class=&quot;string&quot;&gt;&amp;#x27;.svg&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        fs.writeFileSync(file, svg)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&amp;#x27;写入文件&amp;#x27;&lt;/span&gt;, file)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&amp;#x27;success&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="分享" scheme="https://chenshanshu.github.io/2020/06/15/hello-world/categories/%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="svg" scheme="https://chenshanshu.github.io/2020/06/15/hello-world/tags/svg/"/>
    
  </entry>
  
  <entry>
    <title>js字符串和字节的互相转换</title>
    <link href="https://chenshanshu.github.io/2020/06/15/hello-world/2023/03/24/js%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%AD%97%E8%8A%82%E7%9A%84%E4%BA%92%E7%9B%B8%E8%BD%AC%E6%8D%A2/"/>
    <id>https://chenshanshu.github.io/2020/06/15/hello-world/2023/03/24/js%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%AD%97%E8%8A%82%E7%9A%84%E4%BA%92%E7%9B%B8%E8%BD%AC%E6%8D%A2/</id>
    <published>2023-03-24T11:47:11.000Z</published>
    <updated>2025-02-07T05:41:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="字符串转字节序列"><a href="#字符串转字节序列" class="headerlink" title="字符串转字节序列"></a>字符串转字节序列</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字符串转字节序列</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">stringToByte</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> bytes = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">    <span class="keyword">var</span> len, c;</span><br><span class="line">    len = str.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        c = str.charCodeAt(i);</span><br><span class="line">        <span class="keyword">if</span> (c &gt;= <span class="number">0x010000</span> &amp;&amp; c &lt;= <span class="number">0x10FFFF</span>) &#123;</span><br><span class="line">            bytes.push(((c &gt;&gt; <span class="number">18</span>) &amp; <span class="number">0x07</span>) | <span class="number">0xF0</span>);</span><br><span class="line">            bytes.push(((c &gt;&gt; <span class="number">12</span>) &amp; <span class="number">0x3F</span>) | <span class="number">0x80</span>);</span><br><span class="line">            bytes.push(((c &gt;&gt; <span class="number">6</span>) &amp; <span class="number">0x3F</span>) | <span class="number">0x80</span>);</span><br><span class="line">            bytes.push((c &amp; <span class="number">0x3F</span>) | <span class="number">0x80</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c &gt;= <span class="number">0x000800</span> &amp;&amp; c &lt;= <span class="number">0x00FFFF</span>) &#123;</span><br><span class="line">            bytes.push(((c &gt;&gt; <span class="number">12</span>) &amp; <span class="number">0x0F</span>) | <span class="number">0xE0</span>);</span><br><span class="line">            bytes.push(((c &gt;&gt; <span class="number">6</span>) &amp; <span class="number">0x3F</span>) | <span class="number">0x80</span>);</span><br><span class="line">            bytes.push((c &amp; <span class="number">0x3F</span>) | <span class="number">0x80</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c &gt;= <span class="number">0x000080</span> &amp;&amp; c &lt;= <span class="number">0x0007FF</span>) &#123;</span><br><span class="line">            bytes.push(((c &gt;&gt; <span class="number">6</span>) &amp; <span class="number">0x1F</span>) | <span class="number">0xC0</span>);</span><br><span class="line">            bytes.push((c &amp; <span class="number">0x3F</span>) | <span class="number">0x80</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            bytes.push(c &amp; <span class="number">0xFF</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bytes;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="字节序列转ASCII码"><a href="#字节序列转ASCII码" class="headerlink" title="字节序列转ASCII码"></a>字节序列转ASCII码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字节序列转ASCII码</span></span><br><span class="line"><span class="comment">//[0x24, 0x26, 0x28, 0x2A] ==&gt; &quot;$&amp;C*&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">byteToString</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> arr === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        _arr = arr;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; _arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> one = _arr[i].toString(<span class="number">2</span>),</span><br><span class="line">            v = one.match(<span class="regexp">/^1+?(?=0)/</span>);</span><br><span class="line">        <span class="keyword">if</span> (v &amp;&amp; one.length == <span class="number">8</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> bytesLength = v[<span class="number">0</span>].length;</span><br><span class="line">            <span class="keyword">var</span> store = _arr[i].toString(<span class="number">2</span>).slice(<span class="number">7</span> - bytesLength);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> st = <span class="number">1</span>; st &lt; bytesLength; st++) &#123;</span><br><span class="line">                store += _arr[st + i].toString(<span class="number">2</span>).slice(<span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            str += <span class="built_in">String</span>.fromCharCode(<span class="built_in">parseInt</span>(store, <span class="number">2</span>));</span><br><span class="line">            i += bytesLength - <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            str += <span class="built_in">String</span>.fromCharCode(_arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="base64编码"><a href="#base64编码" class="headerlink" title="base64编码"></a>base64编码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(Buffer.from(<span class="string">&#x27;张&#x27;</span>)); <span class="comment">// e5 bc a0</span></span><br><span class="line"><span class="comment">// 可以用toString方法进行进制转换</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0xe5</span>.toString(<span class="number">2</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0xbc</span>.toString(<span class="number">2</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0xa0</span>.toString(<span class="number">2</span>)); </span><br><span class="line"><span class="comment">// 十六进制转为二进制转换后的结果：11100101 10111100 10100000  3 * 8的格式  转化出的每个字节 不得大于64 0~63，转换为二进制最大为6个1，原本八位转换为六位，少了两位，在前面补0</span></span><br><span class="line"><span class="comment">// 3 * 8格式 改成 4 * 6的格式</span></span><br><span class="line"><span class="comment">// 11100101 10111100 10100000 -&gt; 111001011011110010100000 -&gt; 111001 011011 110010 100000 -&gt; 00111001 00011011 00110010 00100000 </span></span><br><span class="line"><span class="comment">// 这样转换后，虽然符合base64规范，但是数据却会大 1/3 因为原来三个字节变成了现在四个字节</span></span><br><span class="line"><span class="comment">// 再将其转换为十进制</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">&#x27;00111001&#x27;</span>,<span class="number">2</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">&#x27;00011011&#x27;</span>,<span class="number">2</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">&#x27;00110010&#x27;</span>,<span class="number">2</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">&#x27;00100000&#x27;</span>,<span class="number">2</span>));</span><br><span class="line"><span class="comment">// 得到57 27 50 32 四个值</span></span><br><span class="line"><span class="comment">// 接下来进行编码 64的编码规范 由 A-Z a-z 0-9 +/ 组成的一个表</span></span><br><span class="line"><span class="comment">// 用得到的十进制数字，去表中对应位置取值，将值连在一起，就是最终编码结果</span></span><br><span class="line"><span class="keyword">let</span> str1 = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span></span><br><span class="line">str1+= str1.toLowerCase();  <span class="comment">//  26 * 2 + 12</span></span><br><span class="line">str1+=<span class="string">&#x27;0123456789+/&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(str1[<span class="number">57</span>] + str1[<span class="number">27</span>] + str1[<span class="number">50</span>] + str1[<span class="number">32</span>]); <span class="comment">// 5byg</span></span><br><span class="line"><span class="comment">// 这样就编码完成了，就可以进行数据传输了</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;字符串转字节序列&quot;&gt;&lt;a href=&quot;#字符串转字节序列&quot; class=&quot;headerlink&quot; title=&quot;字符串转字节序列&quot;&gt;&lt;/a&gt;字符串转字节序列&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//字符串转字节序列&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;stringToByte&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;str&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bytes = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; len, c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    len = str.length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; len; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        c = str.charCodeAt(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (c &amp;gt;= &lt;span class=&quot;number&quot;&gt;0x010000&lt;/span&gt; &amp;amp;&amp;amp; c &amp;lt;= &lt;span class=&quot;number&quot;&gt;0x10FFFF&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            bytes.push(((c &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;) &amp;amp; &lt;span class=&quot;number&quot;&gt;0x07&lt;/span&gt;) | &lt;span class=&quot;number&quot;&gt;0xF0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            bytes.push(((c &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;) &amp;amp; &lt;span class=&quot;number&quot;&gt;0x3F&lt;/span&gt;) | &lt;span class=&quot;number&quot;&gt;0x80&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            bytes.push(((c &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;) &amp;amp; &lt;span class=&quot;number&quot;&gt;0x3F&lt;/span&gt;) | &lt;span class=&quot;number&quot;&gt;0x80&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            bytes.push((c &amp;amp; &lt;span class=&quot;number&quot;&gt;0x3F&lt;/span&gt;) | &lt;span class=&quot;number&quot;&gt;0x80&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (c &amp;gt;= &lt;span class=&quot;number&quot;&gt;0x000800&lt;/span&gt; &amp;amp;&amp;amp; c &amp;lt;= &lt;span class=&quot;number&quot;&gt;0x00FFFF&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            bytes.push(((c &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;) &amp;amp; &lt;span class=&quot;number&quot;&gt;0x0F&lt;/span&gt;) | &lt;span class=&quot;number&quot;&gt;0xE0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            bytes.push(((c &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;) &amp;amp; &lt;span class=&quot;number&quot;&gt;0x3F&lt;/span&gt;) | &lt;span class=&quot;number&quot;&gt;0x80&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            bytes.push((c &amp;amp; &lt;span class=&quot;number&quot;&gt;0x3F&lt;/span&gt;) | &lt;span class=&quot;number&quot;&gt;0x80&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (c &amp;gt;= &lt;span class=&quot;number&quot;&gt;0x000080&lt;/span&gt; &amp;amp;&amp;amp; c &amp;lt;= &lt;span class=&quot;number&quot;&gt;0x0007FF&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            bytes.push(((c &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;) &amp;amp; &lt;span class=&quot;number&quot;&gt;0x1F&lt;/span&gt;) | &lt;span class=&quot;number&quot;&gt;0xC0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            bytes.push((c &amp;amp; &lt;span class=&quot;number&quot;&gt;0x3F&lt;/span&gt;) | &lt;span class=&quot;number&quot;&gt;0x80&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            bytes.push(c &amp;amp; &lt;span class=&quot;number&quot;&gt;0xFF&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; bytes;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;字节序列转ASCII码&quot;&gt;&lt;a href=&quot;#字节序列转ASCII码&quot; class=&quot;headerlink&quot; title=&quot;字节序列转ASCII码&quot;&gt;&lt;/a&gt;字节序列转ASCII码&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//字节序列转ASCII码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//[0x24, 0x26, 0x28, 0x2A] ==&amp;gt; &amp;quot;$&amp;amp;C*&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;byteToString&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;arr&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; arr === &lt;span class=&quot;string&quot;&gt;&amp;#x27;string&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; arr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; str = &lt;span class=&quot;string&quot;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        _arr = arr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; _arr.length; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; one = _arr[i].toString(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            v = one.match(&lt;span class=&quot;regexp&quot;&gt;/^1+?(?=0)/&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (v &amp;amp;&amp;amp; one.length == &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bytesLength = v[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; store = _arr[i].toString(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;).slice(&lt;span class=&quot;number&quot;&gt;7&lt;/span&gt; - bytesLength);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; st = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; st &amp;lt; bytesLength; st++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                store += _arr[st + i].toString(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;).slice(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            str += &lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;.fromCharCode(&lt;span class=&quot;built_in&quot;&gt;parseInt&lt;/span&gt;(store, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            i += bytesLength - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            str += &lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;.fromCharCode(_arr[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; str;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>前端优化</title>
    <link href="https://chenshanshu.github.io/2020/06/15/hello-world/2023/03/23/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96/"/>
    <id>https://chenshanshu.github.io/2020/06/15/hello-world/2023/03/23/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96/</id>
    <published>2023-03-23T17:10:09.000Z</published>
    <updated>2025-02-07T05:41:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>前端优化大概有以下几个方向：</p><ul><li>网络优化</li><li>页面渲染优化</li><li><code>js</code>优化</li><li>图片优化</li><li><code>webpack</code>打包优化</li><li><code>vue</code>优化</li><li><code>react</code>优化</li></ul><h2 id="网络优化"><a href="#网络优化" class="headerlink" title="网络优化"></a>网络优化</h2><ol><li>DNS预解析<br> <code>link</code>标签的<code>rel</code>属性设置<code>dns-prefetch</code>，提前获取域名对应的<code>IP</code>地址</li><li>使用缓存<br> 减轻服务器压力（强缓存和协商缓存）</li><li>使用CDN<br> 用户与服务器的物理距离对响应时间也有影响。<br> 内容分发网络（CDN）是一组分散在不同地理位置的 web 服务器，用来给用户更高效地发送内容。典型地，选择用来发送内容的服务器是基于网络距离的衡量标准的。例如：选跳数（hop）最少的或者响应时间最快的服务器。</li><li>压缩响应<br> 压缩组件通过减少 HTTP 请求产生的响应包的大小，从而降低传输时间的方式来提高性能。从 HTTP1.1 开始，Web 客户端可以通过 HTTP 请求中的 <code>Accept-Encoding</code> 头来标识对压缩的支持（这个请求头会列出一系列的压缩方法）<br> 如果 Web 服务器看到请求中的这个头，就会使用客户端列出的方法中的一种来压缩响应。Web 服务器通过响应中的 <code>Content-Encoding</code> 头来告知 Web 客户端使用哪种方法进行的压缩<br> 目前许多网站通常会压缩 HTML 文档，脚本和样式表的压缩也是值得的（包括 XML 和 JSON 在内的任何文本响应理论上都值得被压缩）。但是，图片和 PDF 文件不应该被压缩，因为它们本来已经被压缩了。</li><li>使用多个域名<br> Chrome 等现代化浏览器，都会有同域名限制并发下载数的情况，不同的浏览器及版本都不一样，<span style="color:#c28a00;">使用不同的域名</span>可以最大化下载线程，但注意保持在 2~4 个域名内，以避免 DNS 查询损耗。</li><li>避免图片src为空<br> 虽然 src 属性为空字符串，但浏览器仍然会向服务器发起一个 HTTP 请求：<br> IE 向页面所在的目录发送请求； Safari、Chrome、Firefox 向页面本身发送请求； Opera 不执行任何操作。</li></ol><h2 id="页面渲染优化"><a href="#页面渲染优化" class="headerlink" title="页面渲染优化"></a>页面渲染优化</h2><p>Webkit 渲染引擎流程：</p><ul><li>处理 HTML 并构建 DOM 树</li><li>处理 CSS 构建 CSS 规则树(CSSOM)</li><li>DOM Tree 和 CSSOM Tree 合成一棵渲染树 Render Tree。</li><li>根据渲染树来布局，计算每个节点的位置</li><li>调用 GPU 绘制，合成图层，显示在屏幕上</li></ul><ol><li><p>避免css阻塞<br>css影响renderTree的构建，会阻塞页面的渲染，因此应该尽早（<span style="color:#c28a00;">将 CSS 放在 head 标签里</span>）和尽快（<span style="color:#c28a00;">启用 CDN 实现静态资源加载速度的优化</span>)的将css资源加载</p></li><li><p>降低css选择器的复杂度，浏览器读取选择器，遵循的原则是从选择器的右边到左边读取。</p><ul><li>减少嵌套：最多不要超过三层，并且后代选择器的开销较高，慎重使用</li><li>避免使用通配符，对用到的元素进行匹配即可</li><li>利用继承，避免重复匹配和定义</li><li>正确使用类选择器和id选择器</li></ul></li><li><p>避免使用CSS 表达式<br> css 表达式会被频繁地计算。</p></li><li><p>使用外链式的js和css<br> 在现实环境中使用外部文件通常会产生较快的页面，因为 JavaScript 和 CSS 有机会<span style="color:#c28a00;">被浏览器缓存起来</span>。对于内联的情况，由于 HTML 文档通常不会被配置为可以进行缓存的，所以每次请求 HTML 文档都要下载 JavaScript 和 CSS。所以，如果 JavaScript 和 CSS 在外部文件中，浏览器可以缓存它们，HTML 文档的大小会被减少而不必增加 HTTP 请求数量。</p></li><li><p>使用字体图标 iconfont 代替图片图标</p><ul><li>图片会增加网络请求次数，从而拖慢页面加载时间</li><li>iconfont可以很好的缩放并且不会添加额外的请求</li></ul></li><li><p>首屏加载优化</p><ul><li>使用骨架屏或者动画优化用户体验</li><li>资源按需加载，首页不需要的资源延迟加载</li></ul></li><li><p>减少重绘和回流</p><ul><li><p>增加多个节点使用documentFragment：不是真实dom的部分，不会引起重绘和回流</p></li><li><p>用 translate 代替 top ，因为 top 会触发回流，但是translate不会。所以translate会比top节省了一个layout的时间</p></li><li><p>使用 visibility 替换 display: none ，因为前者只会引起重绘，后者会引发回流（改变了布局）；opacity 代替 visiability，visiability会触发重绘（paint），但opacity不会。</p></li><li><p>把 DOM 离线后修改，比如：先把 DOM 给 display:none (有一次 Reflow)，然后你修改 100 次，然后再把它显示出来</p></li><li><p>不要把 DOM 结点的属性值放在一个循环里当成循环里的变量</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 获取 offsetTop 会导致回流，因为需要去获取正确的值</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.querySelector(<span class="string">&#x27;.test&#x27;</span>).style.offsetTop)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>尽量少用table布局，table布局的话，每次有单元格布局改变，都会进行整个tabel回流重绘；</p></li><li><p>最好别频繁去操作DOM节点，最好把需要操作的样式，提前写成class，之后需要修改。只需要修改一次，需要修改的时候，直接修改className，做成一次性更新多条css DOM属性，一次回流重绘总比多次回流重绘要付出的成本低得多；</p></li><li><p>动画实现的速度的选择，动画速度越快，回流次数越多，也可以选择使用<code>requestAnimationFrame</code></p></li><li><p>每次访问DOM的偏移量属性的时候，例如获取一个元素的scrollTop、scrollLeft、scrollWidth、offsetTop、offsetLeft、offsetWidth、offsetHeight之类的属性，浏览器为了保证值的正确也会回流取得最新的值，所以如果你要多次操作，最取完做个缓存。更加不要for循环中访问DOM偏移量属性，而且使用的时候，最好定义一个变量，把要需要的值赋值进去，进行值缓存，把回流重绘的次数减少；</p></li><li><p>将频繁运行的动画变为图层，图层能够阻止该节点回流影响别的元素。比如对于 video 标签，浏览器会自动将该节点变为图层。</p></li></ul></li></ol><h2 id="JS中的性能优化"><a href="#JS中的性能优化" class="headerlink" title="JS中的性能优化"></a>JS中的性能优化</h2><ol><li>使用事件委托</li><li>防抖和节流</li><li>尽量不要使用JS动画<br> css3动画和canvas动画都比JS动画性能好</li><li>多线程<br> 复杂的计算开启webWorker进行计算，避免页面假死</li><li>计算结果缓存<br> 减少运算次数，比如vue中的computed</li></ol><h2 id="图片的优化"><a href="#图片的优化" class="headerlink" title="图片的优化"></a>图片的优化</h2><ol><li>雪碧图<br> 借助减少http请求次数来进行优化</li><li>图片懒加载<br> 在图片即将进入可视区域的时候进行加载</li><li>使用CSS3代替图片<br> 有很多图片使用 CSS 效果（渐变、阴影等）就能画出来，这种情况选择 CSS3 效果更好</li><li>图片压缩<br> 压缩方法有两种，一是通过在线网站进行压缩，二是通过 webpack 插件 image-webpack-loader。它是基于 imagemin 这个 Node 库来实现图片压缩的。</li><li>使用渐进式jpeg<br> 使用渐进式jpeg，会提高用户体验 <a class="link"   href="https://www.biaodianfu.com/progressive-jpeg.html" >参考文章<i class="fas fa-external-link-alt"></i></a></li><li>使用 webp 格式的图片<br> webp 是一种新的图片文件格式，它提供了有损压缩和无损压缩两种方式。在相同图片质量下，webp 的体积比 png 和 jpg 更小。</li></ol><h2 id="webpack打包优化"><a href="#webpack打包优化" class="headerlink" title="webpack打包优化"></a>webpack打包优化</h2><ol><li><p>缩小loader 匹配范围</p><ul><li><p>优化loader配置</p></li><li><p>test、include、exclude三个配置项来缩⼩loader的处理范围</p></li><li><p>推荐include</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include: path.resolve(__dirname, <span class="string">&quot;./src&quot;</span>),</span><br></pre></td></tr></table></figure></li></ul></li><li><p>resolve.modules<br> resolve.modules用于配置webpack去哪些目录下寻找第三方模块，默认是 node_modules。<br> 寻找第三方，默认是在当前项目目录下的node_modules里面去找，如果没有找到，就会去上一级目录../node_modules找，再没有会去../../node_modules中找，以此类推，和Node.js的模块寻找机制很类似。<br> 如果我们的第三⽅模块都安装在了项⽬根⽬录下，就可以直接指明这个路径。</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports=&#123;</span><br><span class="line">    <span class="attr">resolve</span>:&#123;</span><br><span class="line">        <span class="attr">modules</span>: [path.resolve(__dirname, <span class="string">&quot;./node_modules&quot;</span>)]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>resolve.extensions<br> resolve.extensions在导⼊语句没带⽂件后缀时，webpack会⾃动带上后缀后，去尝试查找⽂件是否存在。</p><ul><li>后缀尝试列表尽量的⼩</li><li>导⼊语句尽量的带上后缀。</li></ul></li><li><p>抽离css<br> 助mini-css-extract-plugin:本插件会将 CSS 提取到单独的文件中，为每个包含 CSS 的 JS 文件创建一个 CSS 文件，并且支持 CSS 和 SourceMaps 的按需加载</p></li><li><p>代码压缩<br> mode:production，使用的是terser-webpack-plugin</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line">   <span class="attr">optimization</span>: &#123;</span><br><span class="line">       <span class="attr">minimize</span>: <span class="literal">true</span>,</span><br><span class="line">       <span class="attr">minimizer</span>: [</span><br><span class="line">           <span class="keyword">new</span> TerserPlugin(&#123;&#125;),</span><br><span class="line">       ]</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>CSS代码压缩<br> css-minimizer-webpack-plugin</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">   <span class="comment">// ...</span></span><br><span class="line">   <span class="attr">optimization</span>: &#123;</span><br><span class="line">       <span class="attr">minimize</span>: <span class="literal">true</span>,</span><br><span class="line">       <span class="attr">minimizer</span>: [</span><br><span class="line">           <span class="keyword">new</span> CssMinimizerPlugin(&#123;&#125;)</span><br><span class="line">       ]</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Html文件代码压缩</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">       <span class="comment">//...</span></span><br><span class="line">       <span class="attr">plugin</span>:[</span><br><span class="line">           <span class="keyword">new</span> HtmlwebpackPlugin(&#123;</span><br><span class="line">               ...</span><br><span class="line">               <span class="attr">minify</span>:&#123;</span><br><span class="line">                   <span class="attr">minifyCSS</span>:<span class="literal">false</span>, <span class="comment">// 是否压缩css</span></span><br><span class="line">                   <span class="attr">collapseWhitespace</span>:<span class="literal">false</span>, <span class="comment">// 是否折叠空格</span></span><br><span class="line">                   <span class="attr">removeComments</span>:<span class="literal">true</span> <span class="comment">// 是否移除注释</span></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;)</span><br><span class="line">       ]</span><br></pre></td></tr></table></figure></li><li><p>文件大小压缩<br> 对文件的大小进行压缩，减少http传输过程中宽带的损耗<br> compression-webpack-plugin</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> ComepressionPlugin(&#123;</span><br><span class="line">   <span class="attr">test</span>:<span class="regexp">/.(css|js)$/</span>,  <span class="comment">// 哪些文件需要压缩</span></span><br><span class="line">   threshold:<span class="number">500</span>, <span class="comment">// 设置文件多大开始压缩</span></span><br><span class="line">   <span class="attr">minRatio</span>:<span class="number">0.7</span>, <span class="comment">// 至少压缩的比例</span></span><br><span class="line">   <span class="attr">algorithm</span>:<span class="string">&quot;gzip&quot;</span>, <span class="comment">// 采用的压缩算法</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>图片压缩<br> 一般来说在打包之后，一些图片文件的大小是远远要比 js 或者 css 文件要来的大，所以图片压缩较为重要</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/.(png|jpg|gif)$/</span>,</span><br><span class="line">            use: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">loader</span>: <span class="string">&#x27;file-loader&#x27;</span>,</span><br><span class="line">                    <span class="attr">options</span>: &#123;</span><br><span class="line">                        <span class="attr">name</span>: <span class="string">&#x27;[name]_[hash].[ext]&#x27;</span>,</span><br><span class="line">                        <span class="attr">outputPath</span>: <span class="string">&#x27;images/&#x27;</span>,</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">loader</span>: <span class="string">&#x27;image-webpack-loader&#x27;</span>,</span><br><span class="line">                    <span class="attr">options</span>: &#123;</span><br><span class="line">                        <span class="comment">// 压缩 jpeg 的配置</span></span><br><span class="line">                        <span class="attr">mozjpeg</span>: &#123;</span><br><span class="line">                            <span class="attr">progressive</span>: <span class="literal">true</span>,</span><br><span class="line">                            <span class="attr">quality</span>: <span class="number">65</span></span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="comment">// 使用 imagemin**-optipng 压缩 png，enable: false 为关闭</span></span><br><span class="line">                        <span class="attr">optipng</span>: &#123;</span><br><span class="line">                            <span class="attr">enabled</span>: <span class="literal">false</span>,</span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="comment">// 使用 imagemin-pngquant 压缩 png</span></span><br><span class="line">                        <span class="attr">pngquant</span>: &#123;</span><br><span class="line">                            <span class="attr">quality</span>: <span class="string">&#x27;65-90&#x27;</span>,</span><br><span class="line">                            <span class="attr">speed</span>: <span class="number">4</span></span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="comment">// 压缩 gif 的配置</span></span><br><span class="line">                        <span class="attr">gifsicle</span>: &#123;</span><br><span class="line">                            <span class="attr">interlaced</span>: <span class="literal">false</span>,</span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="comment">// 开启 webp，会把 jpg 和 png 图片压缩为 webp 格式</span></span><br><span class="line">                        <span class="attr">webp</span>: &#123;</span><br><span class="line">                            <span class="attr">quality</span>: <span class="number">75</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125; </span><br><span class="line">   </span><br></pre></td></tr></table></figure></li><li><p>Tree shaking 去除死代码<br>Tree Shaking 是一个术语，在计算机中表示消除死代码，依赖于ES Module的静态语法分析（不执行任何的代码，可以明确知道模块的依赖关系）</p><p>在webpack实现Tree shaking有两种不同的方案：</p><ul><li>usedExports：通过标记某些函数是否被使用，之后通过Terser来进行优化的</li><li>sideEffects：跳过整个模块/文件，直接查看该文件是否有副作用</li></ul></li><li><p>css tree shaking</p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install purgecss-plugin-webpack -D</span><br></pre></td></tr></table></figure>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PurgeCssPlugin = <span class="built_in">require</span>(<span class="string">&#x27;purgecss-webpack-plugin&#x27;</span>)</span><br><span class="line">    <span class="built_in">module</span>.exports = &#123;</span><br><span class="line">       ...</span><br><span class="line">       <span class="attr">plugins</span>:[</span><br><span class="line">           <span class="keyword">new</span> PurgeCssPlugin(&#123;</span><br><span class="line">               <span class="attr">path</span>:glob.sync(<span class="string">`<span class="subst">$&#123;path.resolve(<span class="string">&#x27;./src&#x27;</span>)&#125;</span>/**/*`</span>), &#123;<span class="attr">nodir</span>:<span class="literal">true</span>&#125;<span class="comment">// src里面的所有文件</span></span><br><span class="line">               <span class="attr">satelist</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                   <span class="keyword">return</span> &#123;</span><br><span class="line">                       <span class="attr">standard</span>:[<span class="string">&quot;html&quot;</span>]</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;)</span><br><span class="line">       ]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>babel-plugin-transform-runtime减少ES6转化ES5的冗余</p></li><li><p>代码分离<br>这里通过splitChunksPlugin来实现，该插件webpack已经默认安装和集成，只需要配置即可<br>splitChunks主要属性有如下：</p><ul><li>Chunks，对同步代码还是异步代码进行处理</li><li>minSize： 拆分包的大小, 至少为minSize，如何包的大小不超过minSize，这个包不会拆分</li><li>maxSize： 将大于maxSize的包，拆分为不小于minSize的包</li><li>minChunks：被引入的次数，默认是1</li></ul></li><li><p>多线程打包提升打包速度</p></li></ol><h2 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h2><ol><li>v-for添加key</li><li>路由懒加载</li><li>第三方插件按需引入</li><li>合理使用computed和watch</li><li>v-for的同时避免使用v-if</li><li>destory时销毁事件：比如addEventListener添加的事件、setTimeout、setInterval、bus.$on绑定的监听事件等</li></ol><h2 id="react"><a href="#react" class="headerlink" title="react"></a>react</h2><ol><li>map循环展示添加key</li><li>路由懒加载</li><li>第三方插件按需引入</li><li>使用scu，memo或者pureComponent避免不必要的渲染</li><li>合理使用useMemo、memo、useCallback<ul><li>useCallback 是针对函数进行“记忆”的，当它依赖项没有发生改变时，那么该函数的引用并不会随着组件的刷新而被重新赋值。当我们觉得一个函数不需要随着组件的更新而更新引用地址的时候，我们就可以使用 useCallback 去修饰它。</li><li>React.memo 是对组件进行 “记忆”，当它接收的 props 没有发生改变的时候，那么它将返回上次渲染的结果，不会重新执行函数返回新的渲染结果。</li><li>React.useMemo是针对 值计算 的一种“记忆“，当依赖项没有发生改变时，那么无需再去计算，直接使用之前的值，对于组件而言，这带来的一个好处就是，可以减少一些计算，避免一些多余的渲染。当我们遇到一些数据需要在组件内部进行计算的时候，可以考虑一下 React.useMemo</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前端优化大概有以下几个方向：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;网络优化&lt;/li&gt;
&lt;li&gt;页面渲染优化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;js&lt;/code&gt;优化&lt;/li&gt;
&lt;li&gt;图片优化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;webpack&lt;/code&gt;打包优化&lt;/li&gt;
&lt;li&gt;&lt;cod
      
    
    </summary>
    
    
      <category term="优化" scheme="https://chenshanshu.github.io/2020/06/15/hello-world/categories/%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="前端" scheme="https://chenshanshu.github.io/2020/06/15/hello-world/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>前端分享-2023-03-23</title>
    <link href="https://chenshanshu.github.io/2020/06/15/hello-world/2023/03/20/%E5%89%8D%E7%AB%AF%E5%88%86%E4%BA%AB-2023-03-23/"/>
    <id>https://chenshanshu.github.io/2020/06/15/hello-world/2023/03/20/%E5%89%8D%E7%AB%AF%E5%88%86%E4%BA%AB-2023-03-23/</id>
    <published>2023-03-20T10:05:50.000Z</published>
    <updated>2025-02-07T05:41:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="项目环境变量配置"><a href="#项目环境变量配置" class="headerlink" title="项目环境变量配置"></a>项目环境变量配置</h2><ol><li><p>一个<code>Vue CLI</code>项目有三种模式</p><ul><li><code>development</code>模式用于<code>vue-cli-service serve</code></li><li><code>production</code>模式用于<code>vue-cli-service build</code>和<code>vue-cli-service test:e2e</code></li><li><code>test</code>模式用于<code>vue-cli-service test:unit</code><br>在vue项目中，我们添加<code>.env、.env.dev、.env.product、.env.test</code>这些文件，来配置不同的环境变量<br>另外一种方法，在命令后面直接使用–mode参数</li></ul></li><li><p>react项目<br> 安装包<code>env-cmd</code>，然后修改<code>scripts</code></p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;script&quot;</span>:&#123;</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;env-cmd -f .env.test craco build&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>nuxt项目<br> 安装<code>cross-env</code>，这个包可以直接在命令里修改<code>NODE_ENV</code>;</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;script&quot;</span>:&#123;</span><br><span class="line">    <span class="attr">&quot;test&quot;</span>: <span class="string">&quot;cross-env NODE_ENV=test nuxt&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 然后修改<code>nuxt.config.js</code>文件：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">env:&#123;</span><br><span class="line">    <span class="attr">NODE_ENV</span>: env[process.env.NODE_ENV].NODE_ENV,</span><br><span class="line">    <span class="attr">API_URL</span>: env[process.env.NODE_ENV].API_URL</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="element级联选择器结果"><a href="#element级联选择器结果" class="headerlink" title="element级联选择器结果"></a>element级联选择器结果</h2><p>需求：省市区三级选择器，如果选中了省则只传省的名称，下面的市和区不传</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 地区数据</span></span><br><span class="line">araOptions = &#123;</span><br><span class="line">    <span class="attr">label</span>:<span class="string">&#x27;广东&#x27;</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">label</span>: <span class="string">&#x27;广州市&#x27;</span>,</span><br><span class="line">            <span class="attr">children</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">label</span>: <span class="string">&#x27;荔湾区&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">                ...</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        ...</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例如广东省珠海市下面有三个区，选中珠海市，组件返回的数据格式：</span></span><br><span class="line">[</span><br><span class="line">    [<span class="string">&quot;广东&quot;</span>,<span class="string">&quot;珠海市&quot;</span>,<span class="string">&quot;香洲区&quot;</span>]</span><br><span class="line">    [<span class="string">&quot;广东&quot;</span>,<span class="string">&quot;珠海市&quot;</span>,<span class="string">&quot;斗门区&quot;</span>]</span><br><span class="line">    [<span class="string">&quot;广东&quot;</span>,<span class="string">&quot;珠海市&quot;</span>,<span class="string">&quot;金湾区&quot;</span>]</span><br><span class="line">]</span><br><span class="line"><span class="comment">// 当一个市下面的区全部选中，服务的需要的数据格式为：</span></span><br><span class="line"><span class="keyword">var</span> params = &#123;</span><br><span class="line">    <span class="attr">province</span>: [<span class="string">&#x27;广东&#x27;</span>],</span><br><span class="line">    <span class="attr">city</span>: [<span class="string">&#x27;珠海市&#x27;</span>],</span><br><span class="line">    <span class="attr">district</span>: []</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当选中整个广东省，需要的数据格式如下：</span></span><br><span class="line"><span class="keyword">var</span> params = &#123;</span><br><span class="line">    <span class="attr">province</span>: [<span class="string">&#x27;广东&#x27;</span>],</span><br><span class="line">    <span class="attr">city</span>: [],</span><br><span class="line">    <span class="attr">district</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAreaCheckedData</span>(<span class="params">store</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> list1 = [];</span><br><span class="line">    <span class="keyword">let</span> list2 = [];</span><br><span class="line">    <span class="keyword">let</span> list3 = [];</span><br><span class="line">    <span class="keyword">const</span> traverse = <span class="function"><span class="keyword">function</span>(<span class="params">nodes</span>)</span>&#123;</span><br><span class="line">        nodes.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(item.checked)&#123;</span><br><span class="line">                <span class="keyword">if</span>(item.level === <span class="number">1</span>)&#123;</span><br><span class="line">                    list1.push(item.value)</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(item.level === <span class="number">2</span>)&#123;</span><br><span class="line">                    list2.push(item.value)</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(item.level === <span class="number">3</span>)&#123;</span><br><span class="line">                    list3.push(item.value)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!item.checked &amp;&amp; item.children &amp;&amp; item.children.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                traverse(item.children)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    traverse(store.nodes)</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">list1</span>: list1,</span><br><span class="line">        <span class="attr">list2</span>: list2,</span><br><span class="line">        <span class="attr">list3</span>: list3</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> checkedData = getAreaCheckedData(<span class="built_in">this</span>.$refs.refPicker.store);</span><br></pre></td></tr></table></figure><span id="more"></span>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;项目环境变量配置&quot;&gt;&lt;a href=&quot;#项目环境变量配置&quot; class=&quot;headerlink&quot; title=&quot;项目环境变量配置&quot;&gt;&lt;/a&gt;项目环境变量配置&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;一个&lt;code&gt;Vue CLI&lt;/code&gt;项目有三种模式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;development&lt;/code&gt;模式用于&lt;code&gt;vue-cli-service serve&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;production&lt;/code&gt;模式用于&lt;code&gt;vue-cli-service build&lt;/code&gt;和&lt;code&gt;vue-cli-service test:e2e&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;test&lt;/code&gt;模式用于&lt;code&gt;vue-cli-service test:unit&lt;/code&gt;&lt;br&gt;在vue项目中，我们添加&lt;code&gt;.env、.env.dev、.env.product、.env.test&lt;/code&gt;这些文件，来配置不同的环境变量&lt;br&gt;另外一种方法，在命令后面直接使用–mode参数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;react项目&lt;br&gt; 安装包&lt;code&gt;env-cmd&lt;/code&gt;，然后修改&lt;code&gt;scripts&lt;/code&gt;&lt;/p&gt;
 &lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;script&amp;quot;&lt;/span&gt;:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&amp;quot;test&amp;quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;quot;env-cmd -f .env.test craco build&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;nuxt项目&lt;br&gt; 安装&lt;code&gt;cross-env&lt;/code&gt;，这个包可以直接在命令里修改&lt;code&gt;NODE_ENV&lt;/code&gt;;&lt;/p&gt;
 &lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;script&amp;quot;&lt;/span&gt;:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&amp;quot;test&amp;quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;quot;cross-env NODE_ENV=test nuxt&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt; 然后修改&lt;code&gt;nuxt.config.js&lt;/code&gt;文件：&lt;/p&gt;
 &lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;env:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;NODE_ENV&lt;/span&gt;: env[process.env.NODE_ENV].NODE_ENV,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;API_URL&lt;/span&gt;: env[process.env.NODE_ENV].API_URL&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;element级联选择器结果&quot;&gt;&lt;a href=&quot;#element级联选择器结果&quot; class=&quot;headerlink&quot; title=&quot;element级联选择器结果&quot;&gt;&lt;/a&gt;element级联选择器结果&lt;/h2&gt;&lt;p&gt;需求：省市区三级选择器，如果选中了省则只传省的名称，下面的市和区不传&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 地区数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;araOptions = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;label&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&amp;#x27;广东&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;children&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;label&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;广州市&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;children&lt;/span&gt;: [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;attr&quot;&gt;label&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;荔湾区&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 例如广东省珠海市下面有三个区，选中珠海市，组件返回的数据格式：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;string&quot;&gt;&amp;quot;广东&amp;quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&amp;quot;珠海市&amp;quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&amp;quot;香洲区&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;string&quot;&gt;&amp;quot;广东&amp;quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&amp;quot;珠海市&amp;quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&amp;quot;斗门区&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;string&quot;&gt;&amp;quot;广东&amp;quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&amp;quot;珠海市&amp;quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&amp;quot;金湾区&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 当一个市下面的区全部选中，服务的需要的数据格式为：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; params = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;province&lt;/span&gt;: [&lt;span class=&quot;string&quot;&gt;&amp;#x27;广东&amp;#x27;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;city&lt;/span&gt;: [&lt;span class=&quot;string&quot;&gt;&amp;#x27;珠海市&amp;#x27;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;district&lt;/span&gt;: []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 当选中整个广东省，需要的数据格式如下：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; params = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;province&lt;/span&gt;: [&lt;span class=&quot;string&quot;&gt;&amp;#x27;广东&amp;#x27;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;city&lt;/span&gt;: [],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;district&lt;/span&gt;: []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;解决方法：&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getAreaCheckedData&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;store&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; list1 = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; list2 = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; list3 = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; traverse = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;nodes&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        nodes.forEach(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;item&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(item.checked)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(item.level === &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    list1.push(item.value)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(item.level === &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    list2.push(item.value)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(item.level === &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    list3.push(item.value)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!item.checked &amp;amp;&amp;amp; item.children &amp;amp;&amp;amp; item.children.length&amp;gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                traverse(item.children)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    traverse(store.nodes)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;list1&lt;/span&gt;: list1,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;list2&lt;/span&gt;: list2,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;list3&lt;/span&gt;: list3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; checkedData = getAreaCheckedData(&lt;span class=&quot;built_in&quot;&gt;this&lt;/span&gt;.$refs.refPicker.store);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="分享" scheme="https://chenshanshu.github.io/2020/06/15/hello-world/categories/%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="react" scheme="https://chenshanshu.github.io/2020/06/15/hello-world/tags/react/"/>
    
      <category term="nuxt" scheme="https://chenshanshu.github.io/2020/06/15/hello-world/tags/nuxt/"/>
    
  </entry>
  
  <entry>
    <title>前端分享-2023-02-10</title>
    <link href="https://chenshanshu.github.io/2020/06/15/hello-world/2023/02/10/%E5%89%8D%E7%AB%AF%E5%88%86%E4%BA%AB-2023-02-10/"/>
    <id>https://chenshanshu.github.io/2020/06/15/hello-world/2023/02/10/%E5%89%8D%E7%AB%AF%E5%88%86%E4%BA%AB-2023-02-10/</id>
    <published>2023-02-10T10:29:05.000Z</published>
    <updated>2025-02-07T05:41:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="js模拟点击"><a href="#js模拟点击" class="headerlink" title="js模拟点击"></a>js模拟点击</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> clickEvent = <span class="keyword">new</span> MouseEvent(<span class="string">&#x27;click&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">view</span>: <span class="built_in">window</span>,</span><br><span class="line">    <span class="attr">bubbles</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">cancelable</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br><span class="line">inputFile.current.disabled = <span class="string">&quot;&quot;</span>;</span><br><span class="line">inputFile.current.dispatchEvent(clickEvent);</span><br></pre></td></tr></table></figure><p>需求：点击一个按钮，要先判断能否上传文件，如果能上传文件在触发input的点击事件触发文件选择框<br>问题：在Safari中不生效</p><h2 id="axios上传文件问题"><a href="#axios上传文件问题" class="headerlink" title="axios上传文件问题"></a>axios上传文件问题</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = axios.create(&#123;</span><br><span class="line">    <span class="attr">withCredentials</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">baseURL</span>: process.env.REACT_APP_BASE_URL,</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">http.interceptors.request.use(<span class="function"><span class="keyword">function</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (config.url.indexOf(<span class="string">&#x27;/uploadimage&#x27;</span>) &gt;= <span class="number">0</span> || config.url.indexOf(<span class="string">&#x27;/uploadfile&#x27;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        config.withCredentials = <span class="literal">false</span>;</span><br><span class="line">        config.timeout = <span class="number">2</span> * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上传文件的请求 <code>withCredentials</code> 要改成 <code>false</code></p><h2 id="css中的where选择器"><a href="#css中的where选择器" class="headerlink" title="css中的where选择器"></a>css中的where选择器</h2><pre><code>优先级低，方便用户覆盖，兼容有问题</code></pre><h2 id="craco配置"><a href="#craco配置" class="headerlink" title="craco配置"></a>craco配置</h2><ol><li>把入口文件放到一个目录<code>entries</code></li><li>目录下的每个文件作为一个入口进行打包</li><li>每一个入口生成一个同名的<code>html</code>文件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">configureWebpack</span>(<span class="params">webpackConfig, &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    env,</span></span></span><br><span class="line"><span class="params"><span class="function">    paths</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//遍历entries创建多个入口</span></span><br><span class="line">    <span class="keyword">const</span> entriesDir = path.join(paths.appSrc, <span class="string">&#x27;entries&#x27;</span>);</span><br><span class="line">    <span class="keyword">const</span> fileNames = fs.readdirSync(entriesDir);</span><br><span class="line">    <span class="keyword">const</span> entries = &#123;&#125;;</span><br><span class="line">    <span class="keyword">const</span> htmlWebpackPlugins = [];</span><br><span class="line">    fileNames.forEach(<span class="function"><span class="params">fileName</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> filePath = path.join(entriesDir, fileName);</span><br><span class="line">        <span class="keyword">const</span> file = fs.statSync(filePath);</span><br><span class="line">        <span class="keyword">if</span> (file.isDirectory()) &#123;</span><br><span class="line">            entries[fileName] = path.join(filePath, <span class="string">&#x27;index.js&#x27;</span>)</span><br><span class="line">            htmlWebpackPlugins.push(mkHtmlWebpackPlugin([fileName], fileName + <span class="string">&quot;.html&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//覆盖默认的plugins配置</span></span><br><span class="line">    <span class="keyword">const</span> defaultHtmlWebpackPluginIndex = webpackConfig.plugins.findIndex(<span class="function"><span class="params">plugin</span> =&gt;</span> plugin <span class="keyword">instanceof</span> HtmlWebpackPlugin);</span><br><span class="line">    webpackConfig.plugins.splice(defaultHtmlWebpackPluginIndex, <span class="number">1</span>, ...htmlWebpackPlugins);</span><br><span class="line">    webpackConfig = &#123;</span><br><span class="line">        ...webpackConfig,</span><br><span class="line">        <span class="attr">entry</span>: &#123;</span><br><span class="line">            <span class="attr">main</span>: webpackConfig.entry,</span><br><span class="line">            ...entries</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">externals</span>: &#123;</span><br><span class="line">            <span class="attr">react</span>: <span class="string">&#x27;React&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;react-dom&#x27;</span>: <span class="string">&#x27;ReactDOM&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> webpackConfig</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;js模拟点击&quot;&gt;&lt;a href=&quot;#js模拟点击&quot; class=&quot;headerlink&quot; title=&quot;js模拟点击&quot;&gt;&lt;/a&gt;js模拟点击&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; clickEvent = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; MouseEvent(&lt;span class=&quot;string&quot;&gt;&amp;#x27;click&amp;#x27;&lt;/span&gt;, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;view&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;bubbles&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;cancelable&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;inputFile.current.disabled = &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;inputFile.current.dispatchEvent(clickEvent);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;需求：点击一个按钮，要先判断能否上传文件，如果能上传文件在触发input的点击事件触发文件选择框&lt;br&gt;问题：在Safari中不生效&lt;/p&gt;
&lt;h2 id=&quot;axios上传文件问题&quot;&gt;&lt;a href=&quot;#axios上传文件问题&quot; class=&quot;headerlink&quot; title=&quot;axios上传文件问题&quot;&gt;&lt;/a&gt;axios上传文件问题&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; http = axios.create(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;withCredentials&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;baseURL&lt;/span&gt;: process.env.REACT_APP_BASE_URL,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;headers&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;string&quot;&gt;&amp;#x27;Content-Type&amp;#x27;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;application/x-www-form-urlencoded&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;http.interceptors.request.use(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;config&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (config.url.indexOf(&lt;span class=&quot;string&quot;&gt;&amp;#x27;/uploadimage&amp;#x27;&lt;/span&gt;) &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || config.url.indexOf(&lt;span class=&quot;string&quot;&gt;&amp;#x27;/uploadfile&amp;#x27;&lt;/span&gt;) &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        config.withCredentials = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        config.timeout = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;60&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; config&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;上传文件的请求 &lt;code&gt;withCredentials&lt;/code&gt; 要改成 &lt;code&gt;false&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;css中的where选择器&quot;&gt;&lt;a href=&quot;#css中的where选择器&quot; class=&quot;headerlink&quot; title=&quot;css中的where选择器&quot;&gt;&lt;/a&gt;css中的where选择器&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;优先级低，方便用户覆盖，兼容有问题&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;craco配置&quot;&gt;&lt;a href=&quot;#craco配置&quot; class=&quot;headerlink&quot; title=&quot;craco配置&quot;&gt;&lt;/a&gt;craco配置&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;把入口文件放到一个目录&lt;code&gt;entries&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;目录下的每个文件作为一个入口进行打包&lt;/li&gt;
&lt;li&gt;每一个入口生成一个同名的&lt;code&gt;html&lt;/code&gt;文件&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;configureWebpack&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;webpackConfig, &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;params&quot;&gt;&lt;span class=&quot;function&quot;&gt;    env,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;params&quot;&gt;&lt;span class=&quot;function&quot;&gt;    paths&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;params&quot;&gt;&lt;span class=&quot;function&quot;&gt;&amp;#125;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//遍历entries创建多个入口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; entriesDir = path.join(paths.appSrc, &lt;span class=&quot;string&quot;&gt;&amp;#x27;entries&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; fileNames = fs.readdirSync(entriesDir);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; entries = &amp;#123;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; htmlWebpackPlugins = [];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fileNames.forEach(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;fileName&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; filePath = path.join(entriesDir, fileName);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; file = fs.statSync(filePath);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (file.isDirectory()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            entries[fileName] = path.join(filePath, &lt;span class=&quot;string&quot;&gt;&amp;#x27;index.js&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            htmlWebpackPlugins.push(mkHtmlWebpackPlugin([fileName], fileName + &lt;span class=&quot;string&quot;&gt;&amp;quot;.html&amp;quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//覆盖默认的plugins配置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; defaultHtmlWebpackPluginIndex = webpackConfig.plugins.findIndex(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;plugin&lt;/span&gt; =&amp;gt;&lt;/span&gt; plugin &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; HtmlWebpackPlugin);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    webpackConfig.plugins.splice(defaultHtmlWebpackPluginIndex, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, ...htmlWebpackPlugins);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    webpackConfig = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ...webpackConfig,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;entry&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;main&lt;/span&gt;: webpackConfig.entry,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ...entries&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;externals&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;attr&quot;&gt;react&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;React&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&amp;#x27;react-dom&amp;#x27;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;ReactDOM&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; webpackConfig&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="分享" scheme="https://chenshanshu.github.io/2020/06/15/hello-world/categories/%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="js" scheme="https://chenshanshu.github.io/2020/06/15/hello-world/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js事件循环</title>
    <link href="https://chenshanshu.github.io/2020/06/15/hello-world/2022/12/16/js%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/"/>
    <id>https://chenshanshu.github.io/2020/06/15/hello-world/2022/12/16/js%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/</id>
    <published>2022-12-16T10:55:06.000Z</published>
    <updated>2025-02-07T05:41:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="js事件循环"><a href="#js事件循环" class="headerlink" title="js事件循环"></a>js事件循环</h2><p><code>JavaScript</code> 在设计之初便是单线程，即指程序运行时，只有一个线程存在，同一时间只能做一件事</p><blockquote><p>Event Loop：所有同步任务在主线程上执行，形成一个执行栈—-&gt;主线程之外还有任务队列，当异步任务执行有结果的时候就会在任务队列放置一个事件——&gt;当执行栈中的同步任务执行完毕，就会读取任务队列中的事件，将其对应的异步任务放入执行栈执行，这个不断循环往复的过程，就称为事件循环，也就是Event Loop</p></blockquote><h3 id="宏任务-macrotask"><a href="#宏任务-macrotask" class="headerlink" title="宏任务(macrotask)"></a>宏任务(macrotask)</h3><ul><li>script</li><li>setTimeout</li><li>setInterval</li><li>setImmediate (Node独有)</li><li>requestAnimationFrame (浏览器独有)</li><li>I/O（有太多的东西都可以称之为I/O，点击一次button，上传一个文件，与程序产生交互的这些都可以称之为I/O）</li><li>UI rendering (浏览器独有)</li></ul><h3 id="微任务-microtask"><a href="#微任务-microtask" class="headerlink" title="微任务(microtask)"></a>微任务(microtask)</h3><ul><li>process.nextTick(Node独有)</li><li>Promise</li><li>MutationObserver</li></ul><h3 id="例题一"><a href="#例题一" class="headerlink" title="例题一"></a>例题一</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>)​</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">Promise</span>.resolve().then(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="number">3</span>))</span><br><span class="line">&#125;)​</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, rejct</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">    resolve(<span class="number">5</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">data</span> =&gt;</span> cosole.log(data))​</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="number">6</span>))​</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">7</span>)​</span><br></pre></td></tr></table></figure><p><button onClick="this.nextSibling.innerText = '1, 4, 7, 5, 2, 3, 6'; ">点击查看结果：</button><span class="result"></span></p><h3 id="async与await"><a href="#async与await" class="headerlink" title="async与await"></a>async与await</h3><p><code>async</code> 就是用来声明一个异步方法，而 <code>await</code> 是用来等待异步方法执行<br>不管 <code>await</code> 后面跟着的是什么， <code>await</code> 都会阻塞后面的代码</p><h3 id="例题二"><a href="#例题二" class="headerlink" title="例题二"></a>例题二</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;async1 start&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> async2()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;async1 end&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;async2&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;script start&#x27;</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;settimeout&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">async1()</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;promise1&#x27;</span>)</span><br><span class="line">    resolve()</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;promise2&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;script end&#x27;</span>)</span><br></pre></td></tr></table></figure><p><button onClick="this.nextSibling.innerText = 'script start、async1 start、async2、promise1、script end、async1 end、promise2、settimeout'; ">点击查看结果：</button><span class="result"></span></p><h2 id="nextTick的原理"><a href="#nextTick的原理" class="headerlink" title="nextTick的原理"></a>nextTick的原理</h2><blockquote><p>nextTick用于下次Dom更新循环结束之后执行延迟回调</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;js事件循环&quot;&gt;&lt;a href=&quot;#js事件循环&quot; class=&quot;headerlink&quot; title=&quot;js事件循环&quot;&gt;&lt;/a&gt;js事件循环&lt;/h2&gt;&lt;p&gt;&lt;code&gt;JavaScript&lt;/code&gt; 在设计之初便是单线程，即指程序运行时，只有一个线程存在，同一
      
    
    </summary>
    
    
    
      <category term="js" scheme="https://chenshanshu.github.io/2020/06/15/hello-world/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>前端分享-2022-12-15</title>
    <link href="https://chenshanshu.github.io/2020/06/15/hello-world/2022/12/14/%E5%89%8D%E7%AB%AF%E5%88%86%E4%BA%AB-2022-12-15/"/>
    <id>https://chenshanshu.github.io/2020/06/15/hello-world/2022/12/14/%E5%89%8D%E7%AB%AF%E5%88%86%E4%BA%AB-2022-12-15/</id>
    <published>2022-12-14T11:35:14.000Z</published>
    <updated>2025-02-07T05:41:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="console-log"><a href="#console-log" class="headerlink" title="console.log"></a>console.log</h2><p>在写node程序时，使用 <code>console</code> 打印，如果对象里面还是对象时不会展开, 会打印成 <code>[Object]</code>  <code>[Array]</code></p><p>如果打印的内容比较长会超过缓冲区大小， <code>terminal</code> 里会显示不全<br>这些情况下可以使用 <code>debugger</code> 搭配 <code>logpoint</code></p><span id="more"></span><h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><ul><li>main<br><code>main</code> 指的是 <code>npm package</code> 的入口文件，是最古老且最常用的入口文件</li><li>module<br>随着 <code>ESM</code> 和打包工具的发展, 许多 <code>package</code> 会打包成多种格式的包<br>如果使用 <code>import</code> 对该库进行导入，则先寻找 <code>module</code> 字段引入，否则引入 <code>main</code> 字段。</li><li>exports<br>不在 <code>exports</code> 字段中的模块，即使直接访问路径，也无法引用！<br>示例：</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;exports&quot;</span>:&#123;</span><br><span class="line">    <span class="attr">&quot;node&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;dev&quot;</span>: <span class="string">&quot;...&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;production&quot;</span>: <span class="string">&quot;...&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;browser&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;dev&quot;</span>: <span class="string">&quot;...&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;production&quot;</span>: <span class="string">&quot;...&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 或者下面这种</span></span><br><span class="line"><span class="string">&quot;exports&quot;</span>:&#123;</span><br><span class="line">    <span class="attr">&quot;.&quot;</span>:&#123;</span><br><span class="line">        <span class="attr">&quot;import&quot;</span>: <span class="string">&quot;...&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;require&quot;</span>: <span class="string">&quot;...&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>scripts<br>定义在 <code>scripts</code> 中的命令，我们通过 <code>npm run &lt;command&gt;</code> 就可以执行。 <code>npm run &lt;command&gt;</code> 是 <code>npm run-script &lt;command&gt;</code> 的简写<br><code>test</code> 、 <code>start</code> 、 <code>restart</code> 、 <code>stop</code> 这几个命令执行时可以不加 <code>run</code> ；<br><code>env</code> 是一个内置的命令, <code>npm run env</code> 可以获取到脚本运行时的所有环境变量。</li></ul><h2 id="rollup"><a href="#rollup" class="headerlink" title="rollup"></a>rollup</h2><p>在开发一个包想使用<a class="link"   href="https://www.npmjs.com/package/chalk" >chalk<i class="fas fa-external-link-alt"></i></a>时，遇到的一个问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;console-log&quot;&gt;&lt;a href=&quot;#console-log&quot; class=&quot;headerlink&quot; title=&quot;console.log&quot;&gt;&lt;/a&gt;console.log&lt;/h2&gt;&lt;p&gt;在写node程序时，使用 &lt;code&gt;console&lt;/code&gt; 打印，如果对象里面还是对象时不会展开, 会打印成 &lt;code&gt;[Object]&lt;/code&gt;  &lt;code&gt;[Array]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如果打印的内容比较长会超过缓冲区大小， &lt;code&gt;terminal&lt;/code&gt; 里会显示不全&lt;br&gt;这些情况下可以使用 &lt;code&gt;debugger&lt;/code&gt; 搭配 &lt;code&gt;logpoint&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="分享" scheme="https://chenshanshu.github.io/2020/06/15/hello-world/categories/%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="调试" scheme="https://chenshanshu.github.io/2020/06/15/hello-world/tags/%E8%B0%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>快速上手Rollup</title>
    <link href="https://chenshanshu.github.io/2020/06/15/hello-world/2022/11/28/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8BRollup/"/>
    <id>https://chenshanshu.github.io/2020/06/15/hello-world/2022/11/28/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8BRollup/</id>
    <published>2022-11-28T16:17:41.000Z</published>
    <updated>2025-02-07T05:41:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是-Rollup"><a href="#什么是-Rollup" class="headerlink" title="什么是 Rollup"></a>什么是 <code>Rollup</code></h2><blockquote><p>Rollup 是一个 JavaScript 模块打包工具，可以将多个小的代码片段编译为完整的库和应用。与传统的 CommonJS 和 AMD 这一类非标准化的解决方案不同，Rollup 使用的是 ES6 版本 Javascript 中的模块标准。新的 ES 模块可以让你自由、无缝地按需使用你最喜爱的库中那些有用的单个函数。这一特性在未来将随处可用，但 Rollup 让你现在就可以，想用就用。</p></blockquote><h2 id="为什么是-Rollup"><a href="#为什么是-Rollup" class="headerlink" title="为什么是 Rollup"></a>为什么是 <code>Rollup</code></h2><ol><li>这里简单对<code>webpack</code>、<code>gulp</code>、<code>Rollup</code>做一个比较：</li></ol><p><code>gulp</code> 是一个构建工具，主要完成代码压缩、编译转化, 可以替代手工实现自动化工作</p><p><code>Webpack</code> 支持 <code>HMR</code> ，有更完整的插件库，适合用于前端工程化开发</p><p><code>Rollup</code> 更小巧，仅仅是一款 <code>ESM</code> 打包器，支持 <code>Tree-shaking</code></p><ol start="2"><li>如果您的代码库是基于<code>ES6</code>或者<code>TS</code>，且希望其他人安装后可以直接使用，这个时候就可以使用<code>Rollup</code></li></ol><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><p><code>Rollup</code> 可以通过两种方式使用：使用命令行方式，或者 <code>JavaScript API</code> 方式</p><ul><li>直接命令行运行<br>用于浏览器:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 编译为一个在 &lt;script&gt; 标签中可用的自运行函数 (&#x27;iife&#x27;)</span><br><span class="line">rollup main.js --file bundle.js --format iife</span><br></pre></td></tr></table></figure><p>用于 <code>Node.js</code> :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 编译为 CommonJS 模块 (&#x27;cjs&#x27;)</span><br><span class="line">rollup main.js --file bundle.js --format cjs</span><br></pre></td></tr></table></figure><p>同时用于浏览器和 Node.js：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 需要为 UMD 格式的包指定一个名称</span><br><span class="line">rollup main.js --file bundle.js --format umd --name &quot;myBundle&quot;</span><br></pre></td></tr></table></figure><p><code>-f</code> ：是 <code>--format</code> 的缩写。<br><code>-o</code> ：指定了输出的路径。<br><code>-c</code> ：指定rollup的配置文件。<br><code>-w</code> ：监听源文件是否有改动，如果有改动，重新打包。</p><ul><li>使用配置文件<br>在项目中创建一个名为 <code>rollup.config.js</code> 的文件，增加如下代码：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">input</span>: [<span class="string">&quot;./src/index.js&quot;</span>],</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">file</span>: <span class="string">&quot;./dist/bundle.js&quot;</span>,</span><br><span class="line">        <span class="attr">format</span>: <span class="string">&quot;umd&quot;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;experience&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="输出的6种格式"><a href="#输出的6种格式" class="headerlink" title="输出的6种格式"></a>输出的6种格式</h2><p><code>iife</code> , <code>amd</code> , <code>umd</code> , <code>cjs</code> , <code>esm</code> , <code>system</code></p><table><thead><tr><th>模块化方案</th><th>描述</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>iife</td><td>是前端模块化早期的产物，它的核心思路是：<br>1、构建一个匿名函数<br>2、立即执行这个函数，外部的依赖通过入参形式传入<br>3、返回该模块的输出</td><td>不影响代码体积</td><td>1、输出的变量可能影响全局变量，引入依赖包时依赖全局变量<br>2、需要使用者自行维护 <code>script</code> 标签加载顺序</td></tr><tr><td>cjs</td><td>为了解决 <code>node.js</code> 在模块化上的缺失，2009年 <code>CommonJS</code> 规范首次被提出</td><td>完善的模块化方案</td><td>只能在 <code>node.js</code> 环境使用</td></tr><tr><td>amd</td><td>2011年， <code>amdjs-api</code> 被正式提出</td><td>1、解决了 IIFE 的缺点<br>2、一套完备的浏览器里 <code>js</code> 文件模块化方案</td><td>代码组织形式别扭，可读性差</td></tr><tr><td>umd</td><td>兼容了 <code>amd</code> 和 <code>CommonJS</code></td><td>抹平了一个包在 <code>AMD</code> 和 <code>CommonJS</code> 里的差异</td><td>会产生兼容代码</td></tr><tr><td>esm</td><td><code>javascript</code> 模块化官方标准格式。</td><td>可读性高</td><td>部分浏览器不兼容</td></tr></tbody></table><h2 id="Rollup-中常用的几个插件"><a href="#Rollup-中常用的几个插件" class="headerlink" title="Rollup 中常用的几个插件"></a><code>Rollup</code> 中常用的几个插件</h2><ul><li><code>resolve</code>: 将我们编写的源码与依赖的第三方库进行合并</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D @rollup/plugin-node-resolve</span><br></pre></td></tr></table></figure><p>修改 <code>rollup.config.js</code> :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import resolve from &quot;@rollup/plugin-node-resolve&quot;;</span><br><span class="line">export default&#123;</span><br><span class="line">...</span><br><span class="line">plugins: [resolve()],</span><br><span class="line">external: [],</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>commonjs</code>: 使得<code>rollup.js</code>编译支持<code>npm</code>模块和<code>CommonJS</code>模块方式的插件：<code>@rollup/plugin-commonjs</code></li><li><code>babel</code>: 将<code>ES6</code>语法转成<code>ES5</code></li><li><code>json</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是-Rollup&quot;&gt;&lt;a href=&quot;#什么是-Rollup&quot; class=&quot;headerlink&quot; title=&quot;什么是 Rollup&quot;&gt;&lt;/a&gt;什么是 &lt;code&gt;Rollup&lt;/code&gt;&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Rollup 是一个 JavaScript 模块打包工具，可以将多个小的代码片段编译为完整的库和应用。与传统的 CommonJS 和 AMD 这一类非标准化的解决方案不同，Rollup 使用的是 ES6 版本 Javascript 中的模块标准。新的 ES 模块可以让你自由、无缝地按需使用你最喜爱的库中那些有用的单个函数。这一特性在未来将随处可用，但 Rollup 让你现在就可以，想用就用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;为什么是-Rollup&quot;&gt;&lt;a href=&quot;#为什么是-Rollup&quot; class=&quot;headerlink&quot; title=&quot;为什么是 Rollup&quot;&gt;&lt;/a&gt;为什么是 &lt;code&gt;Rollup&lt;/code&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;这里简单对&lt;code&gt;webpack&lt;/code&gt;、&lt;code&gt;gulp&lt;/code&gt;、&lt;code&gt;Rollup&lt;/code&gt;做一个比较：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;gulp&lt;/code&gt; 是一个构建工具，主要完成代码压缩、编译转化, 可以替代手工实现自动化工作&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Webpack&lt;/code&gt; 支持 &lt;code&gt;HMR&lt;/code&gt; ，有更完整的插件库，适合用于前端工程化开发&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Rollup&lt;/code&gt; 更小巧，仅仅是一款 &lt;code&gt;ESM&lt;/code&gt; 打包器，支持 &lt;code&gt;Tree-shaking&lt;/code&gt;&lt;/p&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;如果您的代码库是基于&lt;code&gt;ES6&lt;/code&gt;或者&lt;code&gt;TS&lt;/code&gt;，且希望其他人安装后可以直接使用，这个时候就可以使用&lt;code&gt;Rollup&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;快速开始&quot;&gt;&lt;a href=&quot;#快速开始&quot; class=&quot;headerlink&quot; title=&quot;快速开始&quot;&gt;&lt;/a&gt;快速开始&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Rollup&lt;/code&gt; 可以通过两种方式使用：使用命令行方式，或者 &lt;code&gt;JavaScript API&lt;/code&gt; 方式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;直接命令行运行&lt;br&gt;用于浏览器:&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 编译为一个在 &amp;lt;script&amp;gt; 标签中可用的自运行函数 (&amp;#x27;iife&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rollup main.js --file bundle.js --format iife&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;用于 &lt;code&gt;Node.js&lt;/code&gt; :&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 编译为 CommonJS 模块 (&amp;#x27;cjs&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rollup main.js --file bundle.js --format cjs&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;同时用于浏览器和 Node.js：&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 需要为 UMD 格式的包指定一个名称&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rollup main.js --file bundle.js --format umd --name &amp;quot;myBundle&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;-f&lt;/code&gt; ：是 &lt;code&gt;--format&lt;/code&gt; 的缩写。&lt;br&gt;&lt;code&gt;-o&lt;/code&gt; ：指定了输出的路径。&lt;br&gt;&lt;code&gt;-c&lt;/code&gt; ：指定rollup的配置文件。&lt;br&gt;&lt;code&gt;-w&lt;/code&gt; ：监听源文件是否有改动，如果有改动，重新打包。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用配置文件&lt;br&gt;在项目中创建一个名为 &lt;code&gt;rollup.config.js&lt;/code&gt; 的文件，增加如下代码：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;input&lt;/span&gt;: [&lt;span class=&quot;string&quot;&gt;&amp;quot;./src/index.js&amp;quot;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;output&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;file&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;quot;./dist/bundle.js&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;format&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;quot;umd&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;quot;experience&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="快速上手" scheme="https://chenshanshu.github.io/2020/06/15/hello-world/categories/%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/"/>
    
    
      <category term="Rollup" scheme="https://chenshanshu.github.io/2020/06/15/hello-world/tags/Rollup/"/>
    
  </entry>
  
  <entry>
    <title>编写npm包遇到的问题</title>
    <link href="https://chenshanshu.github.io/2020/06/15/hello-world/2022/11/16/%E7%BC%96%E5%86%99npm%E5%8C%85%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://chenshanshu.github.io/2020/06/15/hello-world/2022/11/16/%E7%BC%96%E5%86%99npm%E5%8C%85%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2022-11-16T17:00:31.000Z</published>
    <updated>2025-02-07T05:41:08.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>前言</strong><br>最近在编写一个npm包时遇到几个问题，记录下来防止下次卡在同一个地方，后续遇到的坑会继续整理</p><h3 id="一、CJS和ESM不能同时使用"><a href="#一、CJS和ESM不能同时使用" class="headerlink" title="一、CJS和ESM不能同时使用"></a>一、CJS和ESM不能同时使用</h3><blockquote><p>问题描述：在编写一个<code>node</code>环境的<code>NPM</code>包时，引用了一个<code>ESM</code>模块机制的包</p></blockquote><ol><li><strong>Node对ESM的支持</strong><br><code>Node</code> 13.2.0 起开始正式支持<code>ES Modules</code>特性，使用方法如下：</li></ol><ul><li>在<code>package.json</code>中，增加<code>&quot;type&quot;:&quot;module&quot;</code></li><li>将文件<code>.js</code>后缀修改为<code>.mjs</code></li><li>上面两种方法二选一，如果不配置，则会抛出警告：<br><code>Warning: To load an ES module, set &quot;type&quot;: &quot;module&quot; in the package.json or use the .mjs extension.</code></li></ul><span id="more"></span><ol start="2"><li>如何发布一个支持 <code>Tree Shaking</code> 机制的 <code>npm</code> 包？<br>pkg.main 字段指向的应该是编译后生成的 ES5 版本的代码。<br>pkg.module 字段要指向的应该是一个基于 ES6 模块规范的使用ES5语法书写的模块。<br>要构建一个满足 pkg.module 字段要求的包其实很简单。如果你是使用 Rollup 打包代码， 那么只需要把 output 的格式设置为 es 就可以啦。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;&lt;br&gt;最近在编写一个npm包时遇到几个问题，记录下来防止下次卡在同一个地方，后续遇到的坑会继续整理&lt;/p&gt;
&lt;h3 id=&quot;一、CJS和ESM不能同时使用&quot;&gt;&lt;a href=&quot;#一、CJS和ESM不能同时使用&quot; class=&quot;headerlink&quot; title=&quot;一、CJS和ESM不能同时使用&quot;&gt;&lt;/a&gt;一、CJS和ESM不能同时使用&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;问题描述：在编写一个&lt;code&gt;node&lt;/code&gt;环境的&lt;code&gt;NPM&lt;/code&gt;包时，引用了一个&lt;code&gt;ESM&lt;/code&gt;模块机制的包&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Node对ESM的支持&lt;/strong&gt;&lt;br&gt;&lt;code&gt;Node&lt;/code&gt; 13.2.0 起开始正式支持&lt;code&gt;ES Modules&lt;/code&gt;特性，使用方法如下：&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;在&lt;code&gt;package.json&lt;/code&gt;中，增加&lt;code&gt;&amp;quot;type&amp;quot;:&amp;quot;module&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;将文件&lt;code&gt;.js&lt;/code&gt;后缀修改为&lt;code&gt;.mjs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;上面两种方法二选一，如果不配置，则会抛出警告：&lt;br&gt;&lt;code&gt;Warning: To load an ES module, set &amp;quot;type&amp;quot;: &amp;quot;module&amp;quot; in the package.json or use the .mjs extension.&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="问题" scheme="https://chenshanshu.github.io/2020/06/15/hello-world/categories/%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="npm" scheme="https://chenshanshu.github.io/2020/06/15/hello-world/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>前端分享-2022-11-03</title>
    <link href="https://chenshanshu.github.io/2020/06/15/hello-world/2022/11/03/%E5%89%8D%E7%AB%AF%E5%88%86%E4%BA%AB-2022-11-03/"/>
    <id>https://chenshanshu.github.io/2020/06/15/hello-world/2022/11/03/%E5%89%8D%E7%AB%AF%E5%88%86%E4%BA%AB-2022-11-03/</id>
    <published>2022-11-03T15:50:11.000Z</published>
    <updated>2025-02-07T05:41:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="遇到的几个问题"><a href="#遇到的几个问题" class="headerlink" title="遇到的几个问题"></a>遇到的几个问题</h2><ul><li>时间戳转换日期出现不准确情况<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> t = <span class="number">577292400000</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(t).toLocaleDateString()) <span class="comment">//1988/4/18</span></span><br><span class="line">t = t - <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>(t).toLocaleDateString()) <span class="comment">//1988/4/16</span></span><br><span class="line"><span class="keyword">let</span> t2 = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&#x27;1988/4/17&#x27;</span>).getTime() <span class="comment">//577209600000</span></span><br><span class="line">t - t2 === <span class="number">23</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span></span><br></pre></td></tr></table></figure></li><li>safari中定位<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>发现用百分比不生效，修改为具体高度后解决</li></ul><span id="more"></span>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;遇到的几个问题&quot;&gt;&lt;a href=&quot;#遇到的几个问题&quot; class=&quot;headerlink&quot; title=&quot;遇到的几个问题&quot;&gt;&lt;/a&gt;遇到的几个问题&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;时间戳转换日期出现不准确情况&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; t = &lt;span class=&quot;number&quot;&gt;577292400000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;(t).toLocaleDateString()) &lt;span class=&quot;comment&quot;&gt;//1988/4/18&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;t = t - &lt;span class=&quot;number&quot;&gt;24&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;60&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;60&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;(t).toLocaleDateString()) &lt;span class=&quot;comment&quot;&gt;//1988/4/16&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; t2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;1988/4/17&amp;#x27;&lt;/span&gt;).getTime() &lt;span class=&quot;comment&quot;&gt;//577209600000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;t - t2 === &lt;span class=&quot;number&quot;&gt;23&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;60&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;60&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;safari中定位&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.box&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;position&lt;/span&gt;: relative;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attribute&quot;&gt;top&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;50%&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
发现用百分比不生效，修改为具体高度后解决&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="分享" scheme="https://chenshanshu.github.io/2020/06/15/hello-world/categories/%E5%88%86%E4%BA%AB/"/>
    
    
  </entry>
  
</feed>
